#!/bin/bash
################################################################################
#
# Copyright (c) 2016, EURECOM (www.eurecom.fr)
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice, this
#    list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
# ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# The views and conclusions contained in the software and documentation are those
# of the authors and should not be interpreted as representing official policies,
# either expressed or implied, of the FreeBSD Project.
#
################################################################################
# file install hook
# brief install the flexran-rtc for different RF target
# author  navid.nikaein@eurecom.fr

install_packages(){
    gitAlreadyInstalled=$(dpkg --get-selections git 2>/dev/null | grep -c 'install') || true
    if [ ! $gitAlreadyInstalled -eq 1 ]; then # If git is NOT installed
	apt-get install -y --force-yes git # Ensure necessary git dependency exist.
    fi
    atAlreadyInstalled=$(dpkg --get-selections at 2>/dev/null | grep -c 'install') || true
    if [ ! $atAlreadyInstalled -eq 1 ]; then 
	# If at command is NOT installed
	apt-get install -y --force-yes at
	# Ensure at command exists to let juju reschedule this hook after rebooting the machine.
    fi
    virtwhatAlreadyInstalled=$(dpkg --get-selections virt-what 2>/dev/null | grep -c 'install') || true
    if [ ! $virtwhatAlreadyInstalled -eq 1 ]; then 
	apt-get install -y --force-yes virt-what
    fi
}

clone_repro(){
    juju-log  "Fetching and installing the FLEXRAN RTC from the repository"
    status-set maintenance "Fetching and installing the FLEXRAN RTC from the repository"

    echo -n | openssl s_client -showcerts -connect gitlab.eurecom.fr:443 2>/dev/null | sed -ne '/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p' >> /etc/ssl/certs/ca-certificates.crt

    #everytime refresh the installation 
    if [ -d "$mosaic_path" ]; then  
	cd $mosaic_path 
	git reset --hard HEAD 
	git checkout $branch 
	shopt -s nocasematch 
	if [[ "$revision" != "$(cat $CHARM_DIR/.revision)" ]]; then 
	    git checkout $revision
	fi 
	cd -
    else
	pushd . 
	git clone https://gitlab.eurecom.fr/mosaic-5g/mosaic-5g.git $mosaic_path
	cd $mosaic_path 
	shopt -s nocasematch
	git submodule init
	git submodule update controller
	cd controller 
	git checkout $branch
	if [[ "$revision" != "HEAD" ]]; then 
	    git checkout $revision
	fi 
	popd 
    fi
}

juju_install_kernel(){
    status-set maintenance "Check the kernel and update if required"
    juju-log "Check the kernel and update if required"

    if [ "$machine_type"  == "lxc" -o "$machine_type" == "docker" ]; then
	juju-log "Can't install the required kernel in $machine_type env. Proceed with the current kernel."
    else  
	if  [ "$machine_type"  == "" ] ; then 
	    juju-log "Please install kerenel version 3.19 on the host".
	else 
	    check_current_kernel
	    if [[ $REQUIRED_KERNEL_IS_INSTALLED == false ]]; then
		if [ "$(cat $CHARM_DIR/.reboot)" != "reboot" ]; then  
		    juju-log "installing the required kernel and reboot"
		    status-set maintenance "installing the required kernel and rebooting"
		    install_required_kernel
  		    echo "reboot" > $CHARM_DIR/.reboot 
		    juju-reboot --now
		else 
		    juju-log "Can't install the required kernel. Proceed with the current kernel."
		fi 
	    fi
	fi 
    fi 
}

set_args(){
 
    if [ "$kernel" == "generic" ]; then 
	build_args="$build_args -DLOWLATENCY=OFF"
	echo "$build_args"  > $CHARM_DIR/.build_args
	cp $CHARM_DIR/.build_args $mosaic_path
    fi
    
}


build_flexran_rtc(){
    juju-log " installing the required packages for Flexrna RTC"
    status-set maintenance " installing the required packages for Flexran RTC"
    $mosaic_path/tools/install_dependencies

    juju-log " Building the Flexran RTC"
    status-set maintenance " Building the Flexran RTC"

    cd $mosaic_path
    cmake $build_args . 
    make
    cd -

}
run_rtc(){
# just a flag for start script to run the service 
    echo "yes" > $CHARM_DIR/.rtc_running
}

set -eux
export DEBIAN_FRONTEND=noninteractive
source $CHARM_DIR/utils/common
set_env_paths

branch=`config-get branch`
revision=`config-get revision`
kernel=`config-get kernel`
user=`config-get user_name`
passwd=`config-get passwd`
bind_if=`config-get bind_if`
bind_port=`config-get bind_port`

open-port $bind_port/tcp


echo "$branch" > $CHARM_DIR/.branch
echo "$revision" > $CHARM_DIR/.revision
echo "$kernel"      >  $CHARM_DIR/.kernel
echo "$bind_if"      >  $CHARM_DIR/.bind_if
echo "$bind_port"      >  $CHARM_DIR/.bind_port
# status var
echo "no"  > $CHARM_DIR/.rtc_running

build_args=""
exec_args=""

install_packages
machine_type=`virt-what`

clone_repro

juju_install_kernel

set_args

build_flexran_rtc

juju-log "Add rtc init script"
cp $CHARM_DIR/service/rtc /etc/init/rtc.conf

run_rtc

status-set blocked "Flexran RTC waiting to be run"
