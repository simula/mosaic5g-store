#!/bin/bash
################################################################################
#
# Copyright (c) 2016, EURECOM (www.eurecom.fr)
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice, this
#    list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
# ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# The views and conclusions contained in the software and documentation are those
# of the authors and should not be interpreted as representing official policies,
# either expressed or implied, of the FreeBSD Project.
#
################################################################################
# file install hook
# brief install the oai-enb for different RF target
# author  navid.nikaein@eurecom.fr

install_packages(){
    gitAlreadyInstalled=$(dpkg --get-selections git 2>/dev/null | grep -c 'install') || true
    if [ ! $gitAlreadyInstalled -eq 1 ]; then # If git is NOT installed
	apt-get install -y --force-yes git # Ensure necessary git dependency exist.
    fi
    atAlreadyInstalled=$(dpkg --get-selections at 2>/dev/null | grep -c 'install') || true
    if [ ! $atAlreadyInstalled -eq 1 ]; then 
	# If at command is NOT installed
	apt-get install -y --force-yes at
	# Ensure at command exists to let juju reschedule this hook after rebooting the machine.
    fi
    virtwhatAlreadyInstalled=$(dpkg --get-selections virt-what 2>/dev/null | grep -c 'install') || true
    if [ ! $virtwhatAlreadyInstalled -eq 1 ]; then 
	apt-get install -y --force-yes virt-what
    fi
}

save_config_file(){
 if [ -f "$CHARM_DIR/.config_file" ]; then
     juju-log "Save the config file somewhere"
     cp $(cat $CHARM_DIR/.config_file) /tmp/
 fi
}

recover_config_file(){
    if [ -f $CHARM_DIR/.config_file ]; then
	if [ -f /tmp/$(cat $CHARM_DIR/.config_file) ]; then
	    juju-log "Retrieve the saved config file"
	    mv /tmp/$(cat $CHARM_DIR/.config_file) $conf_path/
	fi
    fi
}

clone_repro(){
    juju-log  "Fetching and installing Openair5G for $hw"
    status-set maintenance "Fetching and installing Openair5G for $hw"

    echo -n | openssl s_client -showcerts -connect gitlab.eurecom.fr:443 2>/dev/null | sed -ne '/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p' >> /etc/ssl/certs/ca-certificates.crt

    #everytime refresh the installation 
    if [ -d "$openair_path" ]; then  
	#juju-log "Removing the installation directory"
	#rm -rf $openair_path
	juju-log "Updating the installation directory"
	cd $openair_path 
	git reset --hard HEAD 
	#git pull
	git checkout $branch 
	shopt -s nocasematch 
	if [[ "$revision" != "HEAD" ]]; then 
	    git checkout $revision
	fi 
	cd -
    else
	git clone https://gitlab.eurecom.fr/oai/openairinterface5g.git $openair_path
	cd $openair_path 
	shopt -s nocasematch
	git checkout $branch
	if [[ "$revision" != "HEAD" ]]; then 
	    git checkout $revision
	fi 
	cd -
    fi
}

juju_install_kernel(){
    status-set maintenance "Check the kernel and update if required"
    juju-log "Check the kernel and update if required"

    if [ "$machine_type"  == "lxc" -o "$machine_type" == "docker" ]; then
	juju-log "Can't install the required kernel in $machine_type env. Proceed with the current kernel."
    else  
	if  [ "$machine_type"  == "" ] ; then 
	    juju-log "Please install kerenel version 3.19 on the host".
	else 
	    check_current_kernel
	    if [[ $REQUIRED_KERNEL_IS_INSTALLED == false ]]; then
		if [ "$(cat $CHARM_DIR/.reboot)" != "reboot" ]; then  
		    juju-log "installing the required kernel and reboot"
		    status-set maintenance "installing the required kernel and rebooting"
		    install_required_kernel
  		    echo "reboot" > $CHARM_DIR/.reboot 
		    juju-reboot --now
		else 
		    juju-log "Can't install the required kernel. Proceed with the current kernel."
		fi 
	    fi
	fi 
    fi 
}

set_args(){
 
    if [ "$kernel" == "lowlatency" ]; then 
	build_args="$build_args --disable-cpu-affinity --enable-deadline "
	echo "$build_args"  > $CHARM_DIR/.build_args
	cp $CHARM_DIR/.build_args $openair_path
    fi
    
    if [ "$rtmon" == "yes" ]; then 
	open-port 2021/udp
	build_args="$build_args --T-tracer "
	exe_args=" --T-no-wait "
	echo "$exe_args"  > $CHARM_DIR/.exe_args
	cp $CHARM_DIR/.exe_args $openair_path
    fi
    
}

set_config_file(){

    if [ "$config_file" == "default" ]; then 
	
	if [ "$hw" == "usrp" -o "$hw" == "USRP" ]; then
	    config_file=$config_file_usrp
	    config_file_rrh=$config_file_usrp_rrh	
	elif [ "$hw" == "bladerf" -o "$hw" == "BLADERF" ]; then
	    config_file=$config_file_bladerf
	    config_file_rrh=$config_file_bladerf_rrh	
	elif [ "$hw" == "sodera" -o "$hw" == "lmssdr" ]; then
	    config_file=$config_file_sodera
	    config_file_rrh=$config_file_sodera_rrh
	    config_file_rf=$config_file_sodera_path/$config_file_sodera_5mhz_lb
	else
	    config_file=$config_file_exmimo
	    config_file_rrh=$config_file_exmimo_rrh	
	fi 
    else 
	# relative path 
	if [ -f $conf_path/$config_file ]; then 
	    #config_file=$conf_path/$config_file
	    echo "setting the config file to: $config_file"
	    # to be improved as a function of the band
	    if [ "$hw" == "sodera" -o "$hw" == "lmssdr" ]; then
		config_file_rf=$config_file_sodera_path/$config_file_sodera_5mhz_lb
	    fi 
	    # absolute path 
	elif [ -f $config_file ] ; then 
	    echo "please provide the relative path to: $config_file"
	    status-set error "Provide a relative path to the configuration file ($config_file)"
	else 
	    juju-log "configuration file ($config_file) not found"
	    status-set error "configuration file ($config_file) not found"
	fi 
	
    fi

} 

build_enb(){
    if  [ "$rrh_active" == "yes" ]; then
	
	juju-log "setting eNB configuration file to $config_file_rrh"
	
	echo "$config_file_rrh" > $CHARM_DIR/.config_file
	echo "run_enb_s1_usrp" > $CHARM_DIR/.execute
	echo "$rrh_tr_mode"  > $CHARM_DIR/.tr_mode
	echo "$rrh_if_name"  > $CHARM_DIR/.rrh_if_name
	echo "$rrh_tx_shift"  > $CHARM_DIR/.rrh_tx_shift
	echo "$rrh_local_port"  > $CHARM_DIR/.rrh_local_port
	
	echo 2 > $openair_path/.local_remote_rf
	cp $CHARM_DIR/.execute $openair_path
	cp $CHARM_DIR/.config_file $openair_path
	cp $CHARM_DIR/.tr_mode $openair_path
	cp $CHARM_DIR/.rrh_if_name $openair_path
	
	# set the parameters in the target configuration file
	sed -r -i  "s/(rrh_gw_active[ ]*=[ ]*)\"[a-zA-Z]+\"/\1\"yes\"/" $conf_path/$config_file_rrh
	sed -r -i  "s/(tr_preference[ ]*=[ ]*)\"[a-zA-Z]+\"/\1\"$rrh_tr_mode\"/" $conf_path/$config_file_rrh
	sed -r -i  "s/(rf_preference[ ]*=[ ]*)\"[a-zA-Z]+\"/\1\"$hw\"/" $conf_path/$config_file_rrh
	
	sed -r -i  "s/(iq_txshift[ ]*=[ ]*)[0-9]+/\1$rrh_tx_shift/" $conf_path/$config_file_rrh
	sed -r -i  "s/(tx_sample_advance[ ]*=[ ]*)[0-9]+/\1$rrh_tx_sampleadvance/" $conf_path/$config_file_rrh
	sed -r -i  "s/(tx_scheduling_advance[ ]*=[ ]*)[0-9]+/\1$rrh_tx_schedadvance/" $conf_path/$config_file_rrh
	
	
	sed -r -i "/local_if_name/ s/\".+\"/\"$rrh_if_name\"/" $conf_path/$config_file_rrh
	
	if [ "$rrh_tr_mode" == "raw" ]; then 
	    read mac_addr </sys/class/net/$rrh_if_name/address
	    sed -r -i "/local_address/ s/\".+\"/\"$mac_addr\"/" $conf_path/$config_file_rrh
	    
	elif [ "$rrh_tr_mode" == "udp" ]; then 
	    enb_public_ip=`unit-get public-address`
	    get_ip_address $enb_public_ip
	    status=$?
	    if [ "$status" == "1" ] ; then
		status-set error "nslookup failed for the eNB host name ($enb_public_ip)"
	    else
		sed -r -i "/local_address/ s/\".+\"/\"$validated_public_ip\"/" $conf_path/$config_file_rrh 
	    fi 
	    
	else 
	    status-set error "invalide RRH transport mode"
	fi 
	
	echo "Building ENB with RRH gateway"
	status-set maintenance "Building ENB for RRH gateway"
	$build_path/build_oai -I 
	echo "$build_path/build_oai --eNB -t ETHERNET -w None -c -C `echo $build_args`"
	$build_path/build_oai --eNB -t ETHERNET -w None -c -C  `echo $build_args`
	
	
    else
	
	sed -r -i  "s/(rrh_gw_active[ ]*=[ ]*)\"[a-zA-Z]+\"/\1\"no\"/" $conf_path/$config_file
	juju-log "setting eNB configuration file to $config_file"
	echo "$config_file" > $CHARM_DIR/.config_file
	echo "$config_file_rf" > $CHARM_DIR/.config_file_rf
	cp $CHARM_DIR/.config_file $openair_path
	cp $CHARM_DIR/.config_file_rf $openair_path
	
	if [ "$hw" == "usrp" -o "$hw" == "USRP" ]; then
	    
	    echo "run_enb_s1_usrp" > $CHARM_DIR/.execute
	    echo 1 > $openair_path/.local_remote_rf
	    cp $CHARM_DIR/.execute $openair_path
	    
	    echo "Building ENB with USRP hardware"
	    status-set maintenance "Building ENB for USRP"
	    $build_path/build_oai -I -w USRP
	    echo "$build_path/build_oai --eNB -w USRP -c -C `echo $build_args`"
	    $build_path/build_oai --eNB -w USRP -c -C  `echo $build_args`
	    
	elif [ "$hw" == "bladerf" -o "$hw" == "BLADERF" ]; then
	    echo "run_enb_s1_usrp" > $CHARM_DIR/.execute
	    echo 1 > $openair_path/.local_remote_rf
	    cp $CHARM_DIR/.execute $openair_path
	    
	    echo "Building ENB with BLADERF hardware"
	    status-set maintenance "Building ENB for BLADERF"
	    $build_path/build_oai -I  -w BLADERF
	    echo "$build_path/build_oai --eNB -w BLADERF -c -C `echo $build_args`"
	    $build_path/build_oai --eNB -w BLADERF -c -C  `echo $build_args`
	    
	elif [ "$hw" == "sodera" -o "$hw" == "lmssdr" ]; then
	    echo "run_enb_s1_usrp" > $CHARM_DIR/.execute
	    echo 1 > $openair_path/.local_remote_rf
	    
	    cp $CHARM_DIR/.execute $openair_path
	    
	    echo "Building ENB with SODERA hardware"
	    status-set maintenance "Building ENB for SODERA"
	    $build_path/build_oai -I  -w LMSSDR
	    echo "$build_path/build_oai --eNB -w LMSSDR -c -C `echo $build_args`"
	    $build_path/build_oai --eNB -w LMSSDR -c -C  `echo $build_args`
	    
	elif [ "$hw" == "exmimo" -o "$hw" == "EXMIMO" ]; then
	    echo "run_enb_s1_exmimo" > $CHARM_DIR/.execute
	    echo 1 > $openair_path/.local_remote_rf
	    cp $CHARM_DIR/.execute $openair_path
	    
	    echo "Building ENB with EXMIMO hardware"
	    status-set maintenance "Building ENB for EXMIMO"
	    $build_path/build_oai -I
	    echo "$build_path/build_oai --eNB -w EXMIMO -c -C `echo $build_args`"
	    $build_path/build_oai --eNB -w EXMIMO -c -C  `echo $build_args`
	else
	    juju-log -l WARNING "Hardware option not valid, can't proceed because the building procedure cannot be done..."
	fi
    fi 
    
}

set -eux
export DEBIAN_FRONTEND=noninteractive
source /$CHARM_DIR/utils/common
set_env_paths

open-port 2152/udp

branch=`config-get branch`
revision=`config-get revision`
#S1=`config-get S1_interface`
hw=`config-get target_hardware`
config_file=`config-get config_file`
rtmon=`config-get remote_monitoring`
rrh_active=`config-get rrh_active`
rrh_tr_mode=`config-get rrh_transport_mode`
rrh_tx_shift=`config-get rrh_tx_shift`
rrh_tx_sampleadvance=`config-get rrh_tx_sampleadvance`
rrh_tx_schedadvance=`config-get rrh_tx_schedadvance`
rrh_if_name=`config-get rrh_if_name`
rrh_local_port=`config-get rrh_local_port`
kernel=`config-get kernel`

echo "$branch" > $CHARM_DIR/.branch
echo "$revision" > $CHARM_DIR/.revision
echo "$hw" > $CHARM_DIR/.hw
echo "$rrh_active" >  $CHARM_DIR/.rrh_active
echo "$rtmon"      >  $CHARM_DIR/.rtmon
echo "$kernel"      >  $CHARM_DIR/.kernel
echo "no"  > $CHARM_DIR/.rrh_gw_running
echo "no"  > $CHARM_DIR/.epc_running

build_args=""
exe_args=""
config_file_rf="null"

install_packages
machine_type=`virt-what`

save_config_file 

clone_repro

juju_install_kernel

recover_config_file

set_args

set_config_file

build_enb

#add the oaieNB init
juju-log "Add oaieNB init script"
cp $CHARM_DIR/files/oaieNB /etc/init/oaieNB.conf

status-set blocked "Waiting for EPC connection"
