#!/bin/bash
# Copyright 2016-2018 Eurecom and Mosaic5G Platforms Authors
# Licensed to the Mosaic5G under one or more contributor license
# agreements. See the NOTICE file distributed with this
# work for additional information regarding copyright ownership.
# The Mosaic5G licenses this file to You under the
# Apache License, Version 2.0  (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#-------------------------------------------------------------------------------
# For more information about the Mosaic5G:
#      contact@mosaic5g.io
#
################################################################################
# file common
# brief common functions and variables
# author  navid.nikaein@eurecom.fr and A. B. Molini

ubuntu_dist=$(lsb_release -si)$(lsb_release -sr)

set_env(){

  #paths in openair-cn on Git
    mosaic_path=/srv/mosaic5g
    export PATH=$PATH:/snap/bin
    conf_dir=/var/snap/oai-cn/current
    spgw_conf=$conf_dir/spgw.conf
    
    snap_dir=/snap/oai-cn/current/spgw
    
}

check_spgw_process(){

  #IS_RUNNING=`systemctl status spgw.service`
  #if [[ $IS_RUNNING =~ .*running.* ]]; then
    #fi

    IS_ACTIVE=`systemctl is-active snap.oai-cn.spgwd.service`


  if [ "$IS_ACTIVE" == "active" ]; then
     juju-log "OAI SPGW is running" 
     status=0
  else
     juju-log "OAI SPGW is not running" 
     status=1
  fi
}

start_spgw(){
    #oai-cn.spgw-start
    snap start oai-cn.spgwd
}

stop_spgw(){
    #oai-cn.spgw-stop
    snap stop oai-cn.spgwd
}

restart_spgw(){
    #oai-cn.spgw-restart
    snap restart oai-cn.spgwd
}
check_spgw_connection(){

  COUNTER=0
  while [ $COUNTER -lt 30 ]; do
     sleep 1
     if [ "$(grep -c "Initializing SPGW-APP task interface: DONE" /srv/spgw.out)" -gt 0 ]; then
        juju-log "OAI SPGW is running"
        status-set active "OAI SPGW is running"
        break
     fi
     COUNTER=$((COUNTER+1))
  done

  if [ "$COUNTER" -eq 30 ]; then
     status-set maintenance "Make sure SPGW is configured correctly and connected to MME ..."
  fi

}

get_eth_ip(){
  echo `ifconfig $1 | egrep -o "inet addr:[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+" | egrep -o "[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+"`
}

user_conf(){
  juju-log "Setting up the config option chose by the user or the default ones"
  HOSTNAME=`hostname`

  sed -r -i "/IPV4_LIST/,/\);/ s-\"[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+/[0-9]+\",-\"$ipv4_list_start\",-" $spgw_conf
  sed -r -i "/IPV4_LIST/,/\);/ s-\"[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+/[0-9]+\" -\"$ipv4_list_end\" -" $spgw_conf

  juju-log "Setting up network configuration in the spgw.conf file"

  sgw_ipv4=`get_eth_ip $sgw_iface`
  pgw_ipv4=`get_eth_ip $pgw_iface`

  #INTERFACES
  sed -r -i "/SGW_INTERFACE_NAME_FOR_S11/ s/\".*\";/\"$sgw_iface\";/" $spgw_conf
  sed -r -i "/SGW_IPV4_ADDRESS_FOR_S11/ s-\".*\";-\"$sgw_ipv4/24\";-" $spgw_conf

  sed -r -i "/SGW_INTERFACE_NAME_FOR_S1U_S12_S4_UP/ s/\".*\";/\"$sgw_iface\";/" $spgw_conf
  sed -r -i "/SGW_IPV4_ADDRESS_FOR_S1U_S12_S4_UP/ s-\".*\";-\"$sgw_ipv4/24\";-" $spgw_conf

  sed -r -i "/PGW_INTERFACE_NAME_FOR_SGI/ s/\".*\"/\"$pgw_iface\"/" $spgw_conf
  sed -r -i "/PGW_IPV4_ADDRESS_FOR_SGI/ s-\".*\"-\"$pgw_ipv4/24\"-" $spgw_conf

  sed -r -i "/PGW_MASQUERADE_SGI/ s/\".*\";/\"$pgw_masquerade\";/" $spgw_conf

  #DNS
  sed -r -i "/DEFAULT_DNS_IPV4_ADDRESS/ s/\".*\"/\"$DEFAULT_DNS_IPV4_ADDRESS\"/" $spgw_conf
  sed -r -i "/DEFAULT_DNS_SEC_IPV4_ADDRESS/ s/\".*\"/\"$DEFAULT_DNS_SEC_IPV4_ADDRESS\"/" $spgw_conf

  if [ $ue_mtu -le 1500 ] &&  [ $ue_mtu -ge 256 ]; then
      sed -r -i "/FORCE_PUSH_PROTOCOL_CONFIGURATION_OPTIONS/ s/\".*\";/\"yes\";/" $spgw_conf
      sed -r -i "/UE_MTU/ s/[0-9]+/$ue_mtu/" $spgw_conf
  fi

  if [ "$machine_type"  == "lxc" ] || [ "$machine_type" == "docker" ] || [ "$machine_type"  == "lxd" ]; then

      MODULE="gtp"
      MODEXIST=`/sbin/lsmod | grep "$MODULE"`
      if [ -z "$MODEXIST" ]; then
	  juju-log "make sure that the the GTP module is inserted in the host kernel (kernel>4.7)"
      fi
      
      sed -r -i "/GTPV1U_REALIZATION/ s/\".*\";/\"NO_GTP_KERNEL_AVAILABLE\";/" $spgw_conf
  fi 
}

install_required_kernel(){
    version=4.7
    #wget -P /srv/kernel/ ftp://ftp.eurecom.fr/incoming/linux-image-4.7.7-oaiepc_4.7.7-oaiepc-10.00.Custom_amd64.deb
    #wget -P /srv/kernel/ ftp://ftp.eurecom.fr/incoming/linux-headers-4.7.7-oaiepc_4.7.7-oaiepc-10.00.Custom_amd64.deb
    #wget ftp://ftp.eurecom.fr/incoming/linux-headers-4.8.16.oai.amd64.deb
    #wget ftp://ftp.eurecom.fr/incoming/linux-libc-dev_4.8.16.oai.amd64.deb
    #wget ftp://ftp.eurecom.fr/incoming/linux-image-4.8.16.oai.amd64.deb
    #dpkg -i ./*deb
    git clone https://gitlab.eurecom.fr/oai/linux-4.7.x.git
    cd linux-4.7.x
    sudo dpkg -i linux-headers-4.7.7-oaiepc_4.7.7-oaiepc-10.00.Custom_amd64.deb linux-image-4.7.7-oaiepc_4.7.7-oaiepc-10.00.Custom_amd64.deb
    cd -
}

check_current_kernel(){

  #required_kern_release=$(cat $tools_path/build_helper | egrep -o "check_kernel_release_and_install_xtables_addons_oai .+" | cut -d ' ' -f2)
  required_kern_release=4.7
  required_kern_version=`echo $required_kern_release | cut -d '.' -f1`
  required_kern_major_revision=`echo $required_kern_release | cut -d '.' -f2`
  current_kern_release=`uname -r`
  current_kern_version=`echo $current_kern_release | cut -d '.' -f1`
  current_kern_major_revision=`echo $current_kern_release | cut -d '.' -f2`
  if [ "$current_kern_version" -gt "$required_kern_version" ]; then
       REQUIRED_KERNEL_IS_INSTALLED="true"
  elif [ "$current_kern_version" -eq "$required_kern_version" ] && [ "$current_kern_major_revision" -ge "$required_kern_major_revision" ]; then
       REQUIRED_KERNEL_IS_INSTALLED="true"
  else
       REQUIRED_KERNEL_IS_INSTALLED="false"
  fi

}

# get from http://www.linuxjournal.com/content/validating-ip-address-bash-script
validate_ip() {

  local  ip=$1
  local  stat=1

  if [[ $ip =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
      OIFS=$IFS
      IFS='.'
      ip=($ip)
      IFS=$OIFS
      [[ ${ip[0]} -le 255 && ${ip[1]} -le 255 \
          && ${ip[2]} -le 255 && ${ip[3]} -le 255 ]]
      stat=$?
  fi
  return $stat
}

validated_public_ip=0

get_ip_address(){

  local  ip=$1
  local  status=1
  local  status_after=1

  if ! validate_ip $ip; then
      ip=`host $ip | awk '{ print $4 }'`
  fi

  validate_ip $ip

  status=$?
  if [ "$status" == "1" ] ; then 
      echo "doing nslookup for the spgw host name $ip"
      juju-log "perfroming nslookup for the spgw host name ($ip)"
      validated_public_ip=`nslookup $ip | awk ' FNR == 5 {print $2 }'`
      status_after=$(validate_ip $ip)
      if [ "$status_after" == 1 ] ; then 
        echo "nslookup failed for the spgw host name $ip"
        juju-log "nslookup failed for the spgw host name ($ip)"
        return $status_after
      else 
        echo "MME ip address is $validated_public_ip"
        return 0
      fi
  else 
      validated_public_ip=$ip
      echo "MME ip address is $validated_public_ip"
      return 0
  fi 

}
