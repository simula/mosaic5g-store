#!/bin/bash
# Copyright 2016-2018 Eurecom and Mosaic5G Platforms Authors
# Licensed to the Mosaic5G under one or more contributor license
# agreements. See the NOTICE file distributed with this
# work for additional information regarding copyright ownership.
# The Mosaic5G licenses this file to You under the
# Apache License, Version 2.0  (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#-------------------------------------------------------------------------------
# For more information about the Mosaic5G:
#      contact@mosaic5g.io
#
################################################################################
# file common
# brief common functions and variables
# author  navid.nikaein@eurecom.fr 


set_env(){

#paths in openairinterface-5G on Git

    mosaic_path=/srv/mosaic-5g
    rtc_path=$mosaic_path/controller
    rtc_exec=$rtc_path/build
    build_path=$mosaic_path
    tools_path=$mosaic_path/tools
    rtc_exec_name=rt_controller
    
    export PATH=$PATH:/snap/bin
}

check_flexran_process(){

    #IS_RUNNING=`service rtc status`
    #if [[ $IS_RUNNING =~ .*running.* ]]; then
    #fi

    IS_ACTIVE=`systemctl is-active snap.flexran.daemon.service`

    if [ "$IS_ACTIVE" == "active" ]; then
        juju-log "Flexran service is running" 
        status=0
    else
        juju-log "Flexran service is not running"
        status=1
    fi

}

start_flexran(){
    snap start flexran
}

stop_flexran(){
    snap stop flexran
}
restart_flexran(){
    snap restart flexran
}
remove_flexran(){
    snap remove flexran
}

# get from http://www.linuxjournal.com/content/validating-ip-address-bash-script
validate_ip() {

local  ip=$1
local  stat=1

if [[ $ip =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
    OIFS=$IFS
    IFS='.'
    ip=($ip)
    IFS=$OIFS
    [[ ${ip[0]} -le 255 && ${ip[1]} -le 255 \
        && ${ip[2]} -le 255 && ${ip[3]} -le 255 ]]
    stat=$?
fi
return $stat
}

get_ip_address(){

local  ip=$1
local  status=1
local  status_after=1

#if ! validate_ip $ip; then
#    ip=`host $ip | awk '{ print $4 }'`
#fi

validate_ip $ip
status=$?
if [ "$status" == "1" ] ; then
    echo "doing nslookup for the eNB host name $ip"
    juju-log "perfroming nslookup for the eNB host name ($ip)"
    validated_public_ip=$(nslookup $ip | awk ' FNR == 5 {print $2 }')
    status_after=$(validate_ip $ip)
    if [ "$status_after" == 1 ] ; then
        echo "nslookup failed for the eNB host name $ip"
        juju-log "nslookup failed for the eNB host name ($ip)"
        return $status_after
    else
        echo "eNB ip address is $validated_public_ip"
        return 0
    fi
else
    validated_public_ip=$ip
    echo "eNB ip address is $validated_public_ip"
    return 0
fi
}
