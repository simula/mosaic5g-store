#!/bin/bash
# Copyright 2016-2018 Eurecom and Mosaic5G Platforms Authors
# Licensed to the Mosaic5G under one or more contributor license
# agreements. See the NOTICE file distributed with this
# work for additional information regarding copyright ownership.
# The Mosaic5G licenses this file to You under the
# Apache License, Version 2.0  (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#-------------------------------------------------------------------------------
# For more information about the Mosaic5G:
#      contact@mosaic5g.io
#
################################################################################
# file install hook
# brief install the oai-enb for different RF target
# author  navid.nikaein@eurecom.fr

install_packages(){
    apt update
    
    gitAlreadyInstalled=$(dpkg --get-selections snapd 2>/dev/null | grep -c 'install') || true
    if [ ! $gitAlreadyInstalled -eq 1 ]; then # If git is NOT installed
	apt-get install -y --force-yes snapd # Ensure necessary git dependency exist.
    fi

    gitAlreadyInstalled=$(dpkg --get-selections git 2>/dev/null | grep -c 'install') || true
    if [ ! $gitAlreadyInstalled -eq 1 ]; then # If git is NOT installed
	apt-get install -y --force-yes git # Ensure necessary git dependency exist.
    fi
    atAlreadyInstalled=$(dpkg --get-selections at 2>/dev/null | grep -c 'install') || true
    if [ ! $atAlreadyInstalled -eq 1 ]; then 
	# If at command is NOT installed
	apt-get install -y --force-yes at
	# Ensure at command exists to let juju reschedule this hook after rebooting the machine.
    fi
    virtwhatAlreadyInstalled=$(dpkg --get-selections virt-what 2>/dev/null | grep -c 'install') || true
    if [ ! $virtwhatAlreadyInstalled -eq 1 ]; then 
	apt-get install -y --force-yes virt-what || true 
    fi
    cpufreqAlreadyInstalled=$(dpkg --get-selections cpufrequtils 2>/dev/null | grep -c 'install') || true
    if [ ! $cpufreqAlreadyInstalled -eq 1 ]; then 
	apt-get install -y --force-yes cpufrequtils
    fi
}

clone_repro(){
    juju-log  "Fetching the Mosaic5G repository"
    
    echo -n | openssl s_client -showcerts -connect gitlab.eurecom.fr:443 2>/dev/null | sed -ne '/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p' >> /etc/ssl/certs/ca-certificates.crt

    #everytime refresh the installation 
    if [ -d "$mosaic_path" ]; then  
	cd $mosaic_path
	git reset --hard HEAD
	cd - 
    else
	git clone https://gitlab.eurecom.fr/mosaic5g/mosaic5g.git $mosaic_path
    fi
}

set_cpu_freq(){
#getconf _NPROCESSORS_CONF
    num_cpu=`nproc`
    num_cpu=$((num_cpu-1))
    for i in `seq 0 $num_cpu`;
    do 
	cpufreq-set -g performance -c $i || true 
    done 
    #lsmod | grep intel_powerclamp
    #[ $? -eq 0 ] && (rmmod intel_powerclamp || true)
    rmmod intel_powerclamp || true
    
}


build_oai_ran(){

    #sudo snap remove oai-ran

    #if [ ! -d $mosaic_path ] ; then 
#	mkdir $mosaic_path
 #   fi
    
    if [ "$snap" == "edge" ] || [ "$snap" == "beta" ] ; then
	juju-log "Installing OAI-RAN snap"
    else
	juju-log "channel $snap is not supported, use edge or beta"
	snap="edge"
    fi

    if [ -z "$(snap list oai-ran)" ] ; then
        op="install"
    else
        op="refresh"
    fi
    sudo snap $op oai-ran --channel=$snap --devmode

}

init_oai_ran(){
    oai-ran.stop-all || true 

    #check oai ran func 
    if [ "$node_func" != "enb" -o  "$node_func" != "ENB" -o  "$node_func" != "eNB" ] ; then
	echo "The requested $node_func is not supported, reverting to enb."
	echo "enb" > $CHARM_DIR/.node_func
    fi
    
    # just a flag for start script to run the service
    echo "yes" > $CHARM_DIR/.oairan_running_flag
}

status-set maintenance "Install hook"

set -eux
export DEBIAN_FRONTEND=noninteractive
source /$CHARM_DIR/utils/common
#set_env
echo "no" > $CHARM_DIR/.oairan_running_flag


open-port 2152/udp  # S1-U
open-port 36412/tcp # S1-C
#default port 
#open-port 2210/tcp  # FlexRAN
#echo "2210" > $CHARM_DIR/.rtc_port

#general params 
snap=`config-get snap`

# node params 
node_func=`config-get node_function`
hw=`config-get target_hardware`

# MME IP ADD
mme_ip=`config-get mme_ip_addr`

# RRU params 
fh_tr_mode=`config-get fh_transport_mode`
fh_if_name=`config-get fh_if_name`
fh_local_port=`config-get fh_local_port`
open-port $fh_local_port/udp
rru_tx_shift=`config-get rru_tx_shift`
rru_tx_sampleadvance=`config-get rru_tx_sampleadvance`
rru_tx_schedadvance=`config-get rru_tx_schedadvance`


# used to set the config file for this node
band=`config-get eutra_band`
bw=`config-get N_RB_DL`


echo "$snap" > $CHARM_DIR/.snap
echo "$hw" > $CHARM_DIR/.hw
echo "$node_func" > $CHARM_DIR/.node_func
echo "$mme_ip" >  $CHARM_DIR/.mme_ip

echo "no"  > $CHARM_DIR/.rtc_running
echo "no"  > $CHARM_DIR/.enb_running
echo "no"  > $CHARM_DIR/.cu_running
echo "no"  > $CHARM_DIR/.du_running
echo "no"  > $CHARM_DIR/.rru_running
echo "no"  > $CHARM_DIR/.mme_running

exec_args=""
build_oai_for_hw=""
config_oai_for_hw=""
config_file_name=""
config_file_lmsdr="null"

install_packages
machine_type=`virt-what`


#clone_repro

set_cpu_freq

build_oai_ran

init_oai_ran
