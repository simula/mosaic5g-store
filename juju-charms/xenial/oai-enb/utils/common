#!/bin/bash
# Copyright 2016-2018 Eurecom and Mosaic5G Platforms Authors
# Licensed to the Mosaic5G under one or more contributor license
# agreements. See the NOTICE file distributed with this
# work for additional information regarding copyright ownership.
# The Mosaic5G licenses this file to You under the
# Apache License, Version 2.0  (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#-------------------------------------------------------------------------------
# For more information about the Mosaic5G:
#      contact@mosaic5g.io
#
################################################################################
# file common
# brief common functions and variables
# author  navid.nikaein@eurecom.fr and A. B. Molini

#oai-enb-version="2.0"
ubuntu_dist=$(lsb_release -si)$(lsb_release -sr)

set_env(){

#paths in openairinterface-5G on Git
    mosaic_path=/srv/mosaic5g
    export PATH=$PATH:/snap/bin
    enb_conf=/var/snap/oai-ran/current/enb.band7.tm1.50PRB.usrpb210.conf
    cu_conf=/var/snap/oai-ran/current/cu.lte.conf
    du_conf=/var/snap/oai-ran/current/du.lte.band7.10MHz.if4p5.conf
    conf_file=`oai-ran.enb-conf-get`
    
    # not needed anymore, keeping these for a while
    openair_path=$mosaic_path/oai-ran
    build_path=$openair_path/cmake_targets
    tools_path=$build_path/tools
    conf_path=$openair_path/targets/PROJECTS/GENERIC-LTE-EPC/CONF
    exec_path=$openair_path/targets/bin
    oaieNB_exec_name=lte-softmodem.Rel10

    
    config_file_sodera_path=/srv/openair5G/targets/ARCH/LMSSDR
    config_file_sodera_default=enb_sodera_highband_5MHz_rx19dB_txfull.ini
    config_file_sodera_5mhz_hb=enb_sodera_highband_5MHz_rx19dB_txfull.ini
    config_file_sodera_10mhz_hb=enb_sodera_highband_10MHz_rx19dB_txfull.ini
    config_file_sodera_5mhz_lb=enb_sodera_lowband_Lrx_5MHz_rx19dB_txfull.ini
    config_file_sodera_10mhz_lb=enb_sodera_lowband_Lrx_10MHz_rx19dB_txfull.ini
    config_file_sodera_5mhz_wb=enb_sodera_lowband_Wrx_5MHz_rx19dB_txfull.ini
    config_file_sodera_10mhz_wb=enb_sodera_lowband_Wrx_10MHz_rx19dB_txfull.ini

}

get_series(){
local series=$(lsb_release -sc)
if [ -n "$series" ] ; then
    echo $series
else
    echo "unknown"
fi
}
get_kernel_name(){
local series=$(get_series)
case "$series" in
    "trusty") echo "vivid" ; return ;;
    "xenial") echo "xenial" ; return  ;;
    "yakkety") echo "yakkety" ; return ;;
    "zesty") echo "" ; return ;;
esac
echo "vivid"
}
get_kernel_version(){
local series=$(get_series)
case "$series" in
    "trusty") echo "3.19" ; return ;;
    "xenial") echo "4.4.14"  ; return ;;
    "yakkety") echo "4.5.7" ; return ;;
    "zesty") echo "4.8.17"   ; return ;;
esac
echo  "4.4.14"
}

install_required_kernel(){
version=$(get_kernel_version)
name=$(get_kernel_name)
if [ "$(cat $CHARM_DIR/.kernel)" == "lowlatency" ]; then 
    wget -r -e robots=off --accept-regex "(.*lowlatency.*amd64)|(all).deb" http://kernel.ubuntu.com/~kernel-ppa/mainline/v${version}-${name}/
else
    wget -r -e robots=off --accept-regex "(.*generic.*amd64)|(all).deb" http://kernel.ubuntu.com/~kernel-ppa/mainline/v${version}-${name}/
fi 
dpkg -i kernel.ubuntu.com/*/*/*/*deb
}

check_current_kernel(){

required_kern_version=$(get_kernel_version)
required_kern_major=`echo $required_kern_version | cut -d '.' -f1`
required_kern_minor=`echo $required_kern_version | cut -d '.' -f2`
current_kern_release=`uname -r`
current_kern_major=`echo $current_kern_release | cut -d '.' -f1`
current_kern_minor=`echo $current_kern_release | cut -d '.' -f2`

if [[ "$current_kern_release" =~ .*lowlatency.* ]]; then
    LOWLATENCY_KERNEL_IS_INSTALLED="true"
else 
    LOWLATENCY_KERNEL_IS_INSTALLED="false"
fi 

if [ $current_kern_major -eq $required_kern_major ] && [ $current_kern_minor -ge $required_kern_minor ]; then
     REQUIRED_KERNEL_IS_INSTALLED="true"
else
     REQUIRED_KERNEL_IS_INSTALLED="false"
fi

}

check_enb_process(){
	
#IS_RUNNING=`systemctl status enb.service`
#if [[ $IS_RUNNING =~ .*running.* ]]; then
    #fi
    IS_ACTIVE=`systemctl is-active snap.oai-ran.enbd.service`

    if [ "$IS_ACTIVE" == "active" ]; then
	juju-log "OAI eNB is running"
	status=0
    else
	juju-log "OAI eNB is not running" 
	status=1
    fi

}
start_enb(){
   snap start oai-ran.enbd || true
}
stop_enb(){
   snap stop oai-ran.enbd  || true
}
restart_enb(){
    snap restart oai-ran.enbd || true 
}

start_enb_process(){
    # this could be developped as in oai-cn/frontend/run gdb
    oai-ran.enb-restart || true

    check_enb_process $node_func 
    if [ $status -eq 1 ]; then
	echo "no"  > $CHARM_DIR/.oairan_running
        status-set blocked "Not Running, check the config file"
	if [ "$node_func" = "cu" ] ; then
	    reset_cu_running_state
	fi
	#relation-set ${node_func}_running="no"
	exit 1
    else
	echo "yes"  > $CHARM_DIR/.oairan_running
	#relation-set ${node_func}_running="yes"
	if [ "$node_func" = "cu" ] ; then 
	    set_cu_running_state
	fi
	juju-log "Running OAI $node_func"
	status-set active "Running"
    fi 
}

set_cu_running_state(){
    CU_UNIT_RUNNING=0
    relation-set CURUNNING=yes
    if [ -n "$(relation-ids cu)" ]; then
	for cu_id in $(relation-ids cu); do
	    relation-set -r $cu_id cu_running=yes
	done
    fi    
}
reset_cu_running_state(){
    relation-set CURUNNING=no
    if [ -n "$(relation-ids cu)" ]; then
	for cu_id in $(relation-ids cu); do
	    relation-set -r $cu_id cu_running=no
	done
    fi    
}

add_plmn(){

set_env    

sed -r -n "1,/tracking_area_code/ p" $conf_file > $CHARM_DIR/beginning

if [ ! -f $CHARM_DIR/plmn_list ]; then

cat <<EOF > $CHARM_DIR/plmn_list
    plmn_list = ( 
                   { mcc = $1; 
                     mnc = $2; 
                     mnc_length = 2; }
EOF
else

cat <<EOF > /tmp/temp
                  ,{ mcc = $1; 
                     mnc = $2; 
                     mnc_length = 2; } 
EOF

sed -r -i "$,/mnc_length/r /tmp/temp" $CHARM_DIR/plmn_list

fi

cat $CHARM_DIR/beginning > $CHARM_DIR/enb.conf
cat $CHARM_DIR/plmn_list >> $CHARM_DIR/enb.conf
echo ");"                >> $CHARM_DIR/enb.conf

sed -r -n "/tr_s_preference /,$ p" $conf_file >> $CHARM_DIR/enb.conf

mv -f $CHARM_DIR/enb.conf $conf_file
rm -f $CHARM_DIR/beginning

}

remove_plmn(){

    mcc=$1
    mnc=$2
    if [ -f $CHARM_DIR/plmn_list ] ; then

	if [ -z "$(grep $mnc $CHARM_DIR/plmn_list)" ]; then
	    rm -f $CHARM_DIR/plmn_list
	fi

    fi
}

add_mme_ip(){

set_env    

sed -r -n "1,/MME parameters/ p" $conf_file > $CHARM_DIR/beginning

if [ ! -f $CHARM_DIR/mme_ips ]; then

cat <<EOF > $CHARM_DIR/mme_ips
    mme_ip_address      = (  
                              { ipv4       = "$1";
                                ipv6       = "192:168:30::17";
                                active     = "yes";
                                preference = "ipv4"; }
EOF
else

cat <<EOF > /tmp/temp
                             ,{ ipv4       = "$1";
                                ipv6       = "192:168:30::17";
                                active     = "yes";
                                preference = "ipv4"; }
EOF

sed -r -i "$,/enable_measurement_reports/r /tmp/temp" $CHARM_DIR/mme_ips

fi

cat $CHARM_DIR/beginning > $CHARM_DIR/enb.conf
cat $CHARM_DIR/mme_ips >> $CHARM_DIR/enb.conf
echo ");"              >> $CHARM_DIR/enb.conf

sed -r -n "/NETWORK_INTERFACES/,$ p" $conf_file >> $CHARM_DIR/enb.conf

mv -f $CHARM_DIR/enb.conf $conf_file
rm -f $CHARM_DIR/beginning

}

remove_mme_ip(){
    set_env
    sed -r -i "/$1/,/preference/ d" $conf_file
    sed -r -i "0,/ipv4[ \t]*=[ \t]*\"[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+\";/ s/,(\{[ \t]*ipv4[ \t]*=[ \t]*\"[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+\")/ \1/" $conf_file
    
    #if there are no other  relations we can rmeove the file with
    #the list of all the ip mme addresses

    if [ -f $CHARM_DIR/mme_ips ] ; then
	
	sed -r -i "/$1/,/preference/ d" $CHARM_DIR/mme_ips
	sed -r -i "0,/ipv4[ \t]*=[ \t]*\"[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+\";/ s/,(\{[ \t]*ipv4[ \t]*=[ \t]*\"[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+\")/ \1/" $CHARM_DIR/mme_ips
	
	if [ -z "$(grep "ipv4" $CHARM_DIR/mme_ips)" ]; then
	    rm -f $CHARM_DIR/mme_ips
	fi
    fi 
}

add_rtc_ip(){

    set_env
 
    sed -r -i "/FLEXRAN_ENABLED/ s/\".+\"/\"yes\"/" $conf_file
    
    sed -r -i "/FLEXRAN_INTERFACE_NAME/ s/\".+\"/\"$1\"/" $conf_file 
    sed -r -i "/FLEXRAN_IPV4_ADDRESS/ s/\".+\"/\"$2\"/" $conf_file 
    sed -r -i "/FLEXRAN_PORT/ s/\".+\"/\$3/" $conf_file 
        
}
disable_rtc(){

    set_env
    sed -r -i "/FLEXRAN_ENABLED/ s/\".+\"/\"no\"/" $conf_file
        
}

add_rtc_ip(){

    set_env
 
    sed -r -i "/FLEXRAN_ENABLED/ s/\".+\"/\"yes\"/" $conf_file
    
    sed -r -i "/FLEXRAN_INTERFACE_NAME/ s/\".+\"/\"$1\"/" $conf_file 
    sed -r -i "/FLEXRAN_IPV4_ADDRESS/ s/\".+\"/\"$2\"/" $conf_file 
    sed -r -i "/FLEXRAN_PORT/ s/\".+\"/\$3/" $conf_file 
        
}

enable_cu_f1(){
    set_env

    sed -r -i "/CU_INTERFACE_NAME_FOR_F1U/ s/\".+\"/\"$1\"/" $conf_file 
    sed -r -i "/CU_IPV4_ADDRESS_FOR_F1U/ s/\".+\"/\"$2\"/" $conf_file

    sed -r -i "/local_s_if_name/ s/\".+\"/\"$1\"/" $conf_file
    sed -r -i "/local_s_address/ s/\".+\"/\"$2\"/" $conf_file


    if [ $# -ge 3 ]; then 
        sed -r -i "/remote_s_address/ s/\".+\"/\"$3\"/" $conf_file
        sed -r -i "/local_s_portc/ s/\".+\"/\"$4\"/" $conf_file
        sed -r -i "/remote_s_portc/ s/\".+\"/\"$5\"/" $conf_file
        sed -r -i "/loal_s_portd/ s/\".+\"/\"$6\"/" $conf_file
        sed -r -i "/remote_s_portd/ s/\".+\"/\"$7\"/" $conf_file
    fi
    
    sed -r -i  "s/(tr_s_preference[ ]*=[ ]*)\"local_mac\"/\1\"f1\"/" $conf_file
  #  sed -r -i  "s/(tr_n_preference[ ]*=[ ]*)\".*\"/\1\"f1\"/" $conf_file
    
    open-port 22100/tcp
    oai-ran.enb-conf-set $cu_conf
    set_env
}

enable_du_f1(){
    set_env
    sed -r -i "/DU_INTERFACE_NAME_FOR_F1U/ s/\".+\"/\"$1\"/" $conf_file 
    sed -r -i "/DU_IPV4_ADDRESS_FOR_F1U/ s/\".+\"/\"$2\"/" $conf_file

    
    sed -r -i "/local_n_if_name/ s/\".+\"/\"$1\"/" $conf_file
    sed -r -i "/local_n_address/ s/\".+\"/\"$2\"/" $conf_file
    
    if [ $# -ge 3 ]; then 
        sed -r -i "/remote_n_address/ s/\".+\"/\"$3\"/" $conf_file
        sed -r -i "/local_n_portc/ s/\".+\"/\"$4\"/" $conf_file
        sed -r -i "/remote_n_portc/ s/\".+\"/\"$5\"/" $conf_file
        sed -r -i "/loal_n_portd/ s/\".+\"/\"$6\"/" $conf_file
        sed -r -i "/remote_n_portd/ s/\".+\"/\"$7\"/" $conf_file
    fi
    
    sed -r -i "s/(tr_n_preference[ ]*=[ ]*)\"local_RRC\"/\1\"f1\"/" $conf_file

    open-port 22100/tcp
    oai-ran.enb-conf-set $du_conf
    set_env
}


disable_f1(){

    #set_env
    #sed -r -i  "s/(tr_s_preference[ ]*=[ ]*)\"f1\"/\1\"local_mac\"/" $conf_file
    
    #sed -r -i  "s/(tr_n_preference[ ]*=[ ]*)\"f1\"/\1\"local_RRC\"/" $conf_file
    
    close-port 22100/tcp    || true
    #oai-ran.enb-conf-set $enb_conf
    
    #echo "no"  > $CHARM_DIR/.du_active
    #echo "no"  > $CHARM_DIR/.cu_active
    echo "no"  > $CHARM_DIR/.cu_running
    
    set_env
}


# get from http://www.linuxjournal.com/content/validating-ip-address-bash-script
validate_ip() {

    local  ip=$1
    stat=1

if [[ $ip =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
    OIFS=$IFS
    IFS='.'
    ip=($ip)
    IFS=$OIFS
    [[ ${ip[0]} -le 255 && ${ip[1]} -le 255 \
        && ${ip[2]} -le 255 && ${ip[3]} -le 255 ]]
    stat=$?
fi
return $stat
}

get_ip_address(){

local  ip=$1
local  status=1
local  status_after=1

#if ! validate_ip $ip; then
#    ip=`host $ip | awk '{ print $4 }'`
#fi

validate_ip $ip
status=$?
if [ "$status" == "1" ] ; then
    echo "doing nslookup for the eNB host name $ip"
    juju-log "perfroming nslookup for the eNB host name ($ip)"
    validated_public_ip=$(nslookup $ip | awk ' FNR == 5 {print $2 }')
    status_after=$(validate_ip $ip)
    if [ "$status_after" == 1 ] ; then
        echo "nslookup failed for the eNB host name $ip"
        juju-log "nslookup failed for the eNB host name ($ip)"
        return $status_after
    else
        echo "eNB ip address is $validated_public_ip"
        return 0
    fi
else
    validated_public_ip=$ip
    echo "eNB ip address is $validated_public_ip"
    return 0
fi
}

check_ifup(){
    if [[ ! -d /sys/class/net/${1} ]]; then
	juju-log "$1 interface not found"
        return 1
    elif [[ $(</sys/class/net/${1}/operstate) == up ]]; then 
	return 0
    else	
	return 1
    fi
}
get_eth_ip(){
  echo `ip addr show $1 | grep -o 'inet [0-9]\+\.[0-9]\+\.[0-9]\+\.[0-9]\+' | grep -o [0-9].*`
}

get_eth_ip_net(){
  echo `ip addr show $1 | grep -o 'inet [0-9]\+\.[0-9]\+\.[0-9]\+\.[0-9]\+/[0-9]\+' | grep -o [0-9].*`
}
