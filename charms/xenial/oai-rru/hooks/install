#!/bin/bash
################################################################################
#
# Copyright (c) 2016, EURECOM (www.eurecom.fr)
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice, this
#    list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
# ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# The views and conclusions contained in the software and documentation are those
# of the authors and should not be interpreted as representing official policies,
# either expressed or implied, of the FreeBSD Project.
#
################################################################################
# file install hook
# brief install the oai-enb for different RF target
# author  navid.nikaein@eurecom.fr

install_packages(){
    gitAlreadyInstalled=$(dpkg --get-selections git 2>/dev/null | grep -c 'install') || true
    if [ ! $gitAlreadyInstalled -eq 1 ]; then # If git is NOT installed
	apt-get install -y --force-yes git # Ensure necessary git dependency exist.
    fi
    atAlreadyInstalled=$(dpkg --get-selections at 2>/dev/null | grep -c 'install') || true
    if [ ! $atAlreadyInstalled -eq 1 ]; then 
	# If at command is NOT installed
	apt-get install -y --force-yes at
	# Ensure at command exists to let juju reschedule this hook after rebooting the machine.
    fi
    virtwhatAlreadyInstalled=$(dpkg --get-selections virt-what 2>/dev/null | grep -c 'install') || true
    if [ ! $virtwhatAlreadyInstalled -eq 1 ]; then 
	apt-get install -y --force-yes virt-what
    fi
    cpufreqAlreadyInstalled=$(dpkg --get-selections cpufrequtils 2>/dev/null | grep -c 'install') || true
    if [ ! $virtwhatAlreadyInstalled -eq 1 ]; then 
	apt-get install -y --force-yes cpufrequtils
    fi
}

save_config_file(){
    if [ -f $CHARM_DIR/.config_file ]; then
	if [ -f $(cat $CHARM_DIR/.config_file) ]; then
	    juju-log "Save the config file somewhere"
	    cp $(cat $CHARM_DIR/.config_file) /tmp/
	fi
    fi
}

recover_config_file(){
    if [ -f $CHARM_DIR/.config_file ]; then
	if [ -f /tmp/$(cat $CHARM_DIR/.config_file) ]; then
	    juju-log "Retrieve the saved config file"
	    mv /tmp/$(cat $CHARM_DIR/.config_file) $conf_path/
	fi
    fi
}

clone_repro(){
    juju-log  "Fetching and installing Openair5G for $hw"
    status-set maintenance "Fetching and installing Openair5G for $hw"

    echo -n | openssl s_client -showcerts -connect gitlab.eurecom.fr:443 2>/dev/null | sed -ne '/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p' >> /etc/ssl/certs/ca-certificates.crt

    #everytime refresh the installation 
    if [ -d "$openair_path" ]; then  
	#juju-log "Removing the installation directory"
	#rm -rf $openair_path
	juju-log "Updating the installation directory"
	cd $openair_path 
	git reset --hard HEAD 
	#git pull
	git checkout $branch 
	if [ "$revision" != "head" ]; then 
	    git checkout $revision 
	fi 
	cd -
    else
	git clone https://gitlab.eurecom.fr/oai/openairinterface5g.git $openair_path
	cd $openair_path 
	shopt -s nocasematch
	git checkout $branch
	if [ "$revision" != "head" ]; then 
	    git checkout $revision
	fi 
	cd -
    fi
    sed -i -r "s/(exit 1)/#\1/" $build_path/tools/fix_asn1

}

juju_install_kernel(){
    status-set maintenance "Check the kernel and update if required"
    juju-log "Check the kernel and update if required"
    check_current_kernel
    
    if [ "$machine_type"  == "lxc" -o "$machine_type"  == "lxd" -o "$machine_type" == "docker" ]; then
	if [[ $REQUIRED_KERNEL_IS_INSTALLED == false ]]; then
	    status-set blocked "Install the required kernel or deploy the service in a VM" 
	    juju-log "Install the required kernel or deploy the service in a VM" 
	elif [ "$(cat $CHARM_DIR/.kernel)" == "lowlatency" ]; then
	    
	    if [[ $LOWLATENCY_KERNEL_IS_INSTALLED == false ]]; then
		juju-log "Can't install the lowlatency kernel in $machine_type env. Proceed with the current kernel."
		status-set maintenance "Proceed with the current kernel ($machine_type)"
		echo "generic"      >  $CHARM_DIR/.kernel
	    else 
		juju-log "Required kernel is installed"
		echo "lowlatency"      >  $CHARM_DIR/.kernel
	    fi
	else
	    status-set maintenance "Proceed with the current kernel ($machine_type)"
	    juju-log "Required kernel is installed"
	fi 
    else  
	if [[ $REQUIRED_KERNEL_IS_INSTALLED == false ]]; then
	    if [ "$(cat $CHARM_DIR/.reboot)" != "reboot" ]; then  
		juju-log "installing the required kernel and reboot"
		status-set maintenance "installing the required kernel and rebooting"
		install_required_kernel
  		echo "reboot" > $CHARM_DIR/.reboot 
		juju-reboot --now
	    else 
		juju-log "Can't install the required kernel. Proceed with the current kernel."
	    fi 
	fi
    fi 
}

set_cpu_freq(){
#getconf _NPROCESSORS_CONF
    num_cpu=`nproc`
    num_cpu=$((num_cpu-1))
    for i in `seq 0 $num_cpu`;
    do 
	cpufreq-set -g performance -c $i || true 
    done 
    lsmod | grep intel_powerclamp
    [ $? -eq 0 ] && (rmmod intel_powerclamp || true)
    
}

set_build_args(){
 
    if [ "$kernel" == "lowlatency" ]; then
	juju-log "Enable low-latency (SCHED_DEADLINE) kernel if applies"
	build_args="$build_args --disable-cpu-affinity --enable-deadline "
	echo "$build_args"  > $CHARM_DIR/.build_args
	cp $CHARM_DIR/.build_args $openair_path
    fi

    juju-log "Enable OAI node $node_func for $hw"

    if [ "$hw" == "usrp_b200" ]; then
	build_oai_for_hw="USRP"
	config_oai_for_hw="usrpb210"
    elif [ "$hw" == "usrp_300" ]; then
	build_oai_for_hw="USRP"
	config_oai_for_hw="usrpx300"
    elif [ "$hw" == "lmsdr" ]; then 
	build_oai_for_hw="LMSDR"
	config_oai_for_hw="lmsdr"
    elif [ "$hw" == "bladrf" ]; then
	build_oai_for_hw="BLADERF"
	config_oai_for_hw="bladerfx40"
    else
	juju-log "Unknown target hardware ($hw), setting the hardware to usrpb210"
	build_oai_for_hw="USRP"
	config_oai_for_hw="usrpb210"
    fi 
    
    build_args="$build_args --eNB -t ETHERNET -w $build_oai_for_hw -c -C "
    echo "$build_args"  > $CHARM_DIR/.build_args
    cp $CHARM_DIR/.build_args $openair_path
    
}

set_config_file(){

    if [ "$config_file" == "default" ]; then 
	
	if [ "$node_func" == "NGFI_RRU_IF5" ]; then
	    #config_file_name="rru.band${band}.tm1.if5.${bw}PRB.${config_oai_for_hw}.conf"
	    config_file_name="rru.band7.tm1.if5.${bw}PRB.${config_oai_for_hw}.conf"
	    
	elif [ "$node_func" == "NGFI_RRU_IF4p5" ]; then 
	    #onfig_file_name="rru.band${band}.tm1.if4p5.${bw}PRB.${config_oai_for_hw}.conf"
	    config_file_name="rru.band7.tm1.if4p5.${bw}PRB.${config_oai_for_hw}.conf"
	else
	    #onfig_file_name="rru.band${band}.tm1.if4p5.${bw}PRB.${config_oai_for_hw}.conf"
	    config_file_name="rru.band7.tm1.if4p5.${bw}PRB.${config_oai_for_hw}.conf"
	    juju-log "unknown node func $node_func, setting to NFGI_RRU_IF4p5"
	fi 
	
	if [ ! -f $conf_path/$config_file_name ]; then 
	    juju-log "default config file not found, please set the config file manualy"
	    status-set blocked "default config file not found, please set the config file manualy"
	    
	else
	    juju-log "setting the configuration file to $config_file_name for $node_func and RF $hw"
	fi 
	
    else 
	# relative path 
	if [ -f "$conf_path/$config_file" ]; then 
	    config_file_name=$config_file
	    juju-log "setting the configuration file to $config_file_name for $node_func and RF $hw"
	    # to be improved as a function of the band
	    if [ "$hw" == "lmssdr" ]; then
		config_file_lmsdr=$config_file_sodera_path/$config_file_sodera_5mhz_lb
	    fi 
	    # absolute path 
	elif [ -f $config_file ] ; then 
	    echo "please provide the relative path to: $config_file"
	    status-set blocked "Provide a relative path to the configuration file ($config_file)"
	else 
	    juju-log "configuration file ($config_file) not found"
	    status-set blocked "configuration file ($config_file) not found"
	fi 
	
    fi

} 

build_enb_rru(){
    # IF
    juju-log "Building OAI $node_func for SDR $build_oai_for_hw"
    status-set maintenance "Building OAI $node_func for SDR $build_oai_for_hw"
    $build_path/build_oai -I -w $build_oai_for_hw
    juju-log  "$build_path/build_oai `echo $build_args`"
    $build_path/build_oai  `echo $build_args`


    echo "$config_file_name" > $CHARM_DIR/.config_file
    echo "$config_file_lmsdr" > $CHARM_DIR/.config_file_lmsdr
    echo "$oaieNB_exec_name" > $CHARM_DIR/.execute
    echo "$fh_tr_mode"  > $CHARM_DIR/.fh_tr_mode
    echo "$fh_if_name"  > $CHARM_DIR/.fh_if_name
    echo "$fh_local_port"  > $CHARM_DIR/.fh_local_port

 
    cp $CHARM_DIR/.execute $openair_path
    cp $CHARM_DIR/.config_file $openair_path
    cp $CHARM_DIR/.config_file_lmsdr $openair_path
    cp $CHARM_DIR/.fh_tr_mode $openair_path
    cp $CHARM_DIR/.fh_if_name $openair_path
    	
   juju-log "setting the configuration file $config_file_name with Fronthaul"
	
   # set the common parameters in the target configuration file
   sed -r -i  "s/(rrh_gw_active[ ]*=[ ]*)\"[a-zA-Z]+\"/\1\"yes\"/" $conf_path/$config_file_name
   sed -r -i  "s/(tr_preference[ ]*=[ ]*)\"[a-zA-Z]+\"/\1\"$fh_tr_mode\"/" $conf_path/$config_file_name
   sed -r -i  "s/(rf_preference[ ]*=[ ]*)\"[a-zA-Z]+\"/\1\"$hw\"/" $conf_path/$config_file_name
   
   sed -r -i "/local_if_name/ s/\".+\"/\"$fh_if_name\"/" $conf_path/$config_file_name
   
   if [ "$fh_tr_mode" == "raw" ] || [ "$fh_tr_mode" == "raw_if4p5" ] ; then 
       check_ifup $fh_if_name
       status=$?
       if [ "$status" == "0" ] ; then
	 read mac_addr </sys/class/net/$fh_if_name/address
	 echo "$mac_addr"  > $CHARM_DIR/.fh_address
         sed -r -i "/local_address/ s/\".+\"/\"$mac_addr\"/" $conf_path/$config_file_name
       else
	 juju-log -l WARNING "fh_if_name interface $fh_if_name does not exist"
         status-set blocked "fh_if_name interface $fh_if_name does not exist"
	fi

   elif [ "$fh_tr_mode" == "udp" ] || [ "$fh_tr_mode" == "udp_if4p5" ] ; then 
       enb_public_ip=`unit-get public-address`
       get_ip_address $enb_public_ip
       status=$?
       if [ "$status" == "1" ] ; then
	   status-set blocked "nslookup failed for the eNB host name ($enb_public_ip)"
       else
	 echo "$validated_public_ip"  > $CHARM_DIR/.fh_address
	  sed -r -i "/local_address/ s/\".+\"/\"$validated_public_ip\"/" $conf_path/$config_file_name 
       fi 
       
   else 
       status-set blocked "invalide Fronthaul transport mode"
   fi 
     
		
}

set_exec_args(){

    exec_args="$exec_args -O $conf_path/$config_file_name "
    echo "$exec_args"  > $CHARM_DIR/.exec_args
    cp $CHARM_DIR/.exec_args $openair_path

}
run_enb_rru(){
# just a flag for start script to run the service
    echo "yes" > $CHARM_DIR/.rru_running_flag
}


set -eux
export DEBIAN_FRONTEND=noninteractive
source /$CHARM_DIR/utils/common
set_env_paths

open-port 2152/udp

branch=`config-get branch`
revision=`config-get revision`
kernel=`config-get kernel`
node_func=`config-get node_function`
#S1=`config-get S1_interface`
if [ -f $CHARM_DIR/.hw ]; then
    hw=`cat $CHARM_DIR/.hw`
    juju-log "Reset the RF hardware to $hw"
else
    hw=`config-get target_hardware`
fi 

config_file=`config-get config_file`

fh_tr_mode=`config-get fh_transport_mode`
fh_if_name=`config-get fh_if_name`
fh_local_port=`config-get fh_local_port`

open-port $fh_local_port/udp

rru_tx_shift=`config-get rru_tx_shift`
rru_tx_sampleadvance=`config-get rru_tx_sampleadvance`
rru_tx_schedadvance=`config-get rru_tx_schedadvance`

# used to set the config file for this node
band=`config-get eutra_band`
bw=`config-get N_RB_DL`

echo "$branch" > $CHARM_DIR/.branch
echo "$revision" > $CHARM_DIR/.revision
echo "$hw" > $CHARM_DIR/.hw
echo "$kernel"      >  $CHARM_DIR/.kernel
echo "$node_func" > $CHARM_DIR/.node_func


build_args=""
exec_args=""
build_oai_for_hw=""
config_oai_for_hw=""
config_file_name=""
config_file_lmsdr="null"

install_packages
machine_type=`virt-what`

save_config_file 

clone_repro

juju_install_kernel

set_cpu_freq

recover_config_file

set_build_args

set_config_file

build_enb_rru

set_exec_args

run_enb_rru

#add the oaieNB init
juju-log "Add oaieNB init script"
cp $CHARM_DIR/files/rru.service /etc/systemd/system/

juju-log "build_args $CHARM_DIR/.build_args"
juju-log "exec_args $CHARM_DIR/.exec_args"
status-set blocked "RRU Waiting to be run"
