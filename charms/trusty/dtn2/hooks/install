#!/bin/bash

install_packages(){
    gitAlreadyInstalled=$(dpkg --get-selections git 2>/dev/null | grep -c 'install') || true
    if [ ! $gitAlreadyInstalled -eq 1 ]; then # If git is NOT installed
	apt-get install -y --force-yes git # Ensure necessary git dependency exist.
    fi

    atAlreadyInstalled=$(dpkg --get-selections at 2>/dev/null | grep -c 'install') || true
    if [ ! $atAlreadyInstalled -eq 1 ]; then 
	# If at command is NOT installed
	apt-get install -y --force-yes at
	# Ensure at command exists to let juju reschedule this hook after rebooting the machine.
    fi

    virtwhatAlreadyInstalled=$(dpkg --get-selections virt-what 2>/dev/null | grep -c 'install') || true
    if [ ! $virtwhatAlreadyInstalled -eq 1 ]; then 
	apt-get install -y --force-yes virt-what
    fi

    gccAlreadyInstalled=$(dpkg --get-selections gcc 2>/dev/null | grep -c 'install') || true
    if [ ! $gccAlreadyInstalled -eq 1 ]; then
        # If gcc command is NOT installed
        apt-get install -y --force-yes gcc
        # Ensure at command exists to let juju reschedule this hook after rebooting the machine.
    fi

    gppAlreadyInstalled=$(dpkg --get-selections g++ 2>/dev/null | grep -c 'install') || true
    if [ ! $gppAlreadyInstalled -eq 1 ]; then
        # If g++ command is NOT installed
        apt-get install -y --force-yes g++
        # Ensure at command exists to let juju reschedule this hook after rebooting the machine.
    fi

    mercurialAlreadyInstalled=$(dpkg --get-selections mercurial 2>/dev/null | grep -c 'install') || true
    if [ ! $mercurialAlreadyInstalled -eq 1 ]; then
        # If hg command is NOT installed
        apt-get install -y --force-yes mercurial
        # Ensure at command exists to let juju reschedule this hook after rebooting the machine.
    fi

    tkAlreadyInstalled=$(dpkg --get-selections tk8.5-dev 2>/dev/null | grep -c 'install') || true
    if [ ! $tkAlreadyInstalled -eq 1 ]; then
        # If hg command is NOT installed
        apt-get install -y --force-yes tk8.5-dev
        # Ensure at command exists to let juju reschedule this hook after rebooting the machine.
    fi

    tclAlreadyInstalled=$(dpkg --get-selections tcl8.5-dev 2>/dev/null | grep -c 'install') || true
    if [ ! $tclAlreadyInstalled -eq 1 ]; then
        # If hg command is NOT installed
        apt-get install -y --force-yes tcl8.5-dev
        # Ensure at command exists to let juju reschedule this hook after rebooting the machine.
    fi

    dbAlreadyInstalled=$(dpkg --get-selections libdb-dev 2>/dev/null | grep -c 'install') || true
    if [ ! $dbAlreadyInstalled -eq 1 ]; then
        # If hg command is NOT installed
        apt-get install -y --force-yes libdb-dev
        # Ensure at command exists to let juju reschedule this hook after rebooting the machine.
    fi

    sslAlreadyInstalled=$(dpkg --get-selections libssl-dev 2>/dev/null | grep -c 'install') || true
    if [ ! $sslAlreadyInstalled -eq 1 ]; then
        # If hg command is NOT installed
        apt-get install -y --force-yes libssl-dev
        # Ensure at command exists to let juju reschedule this hook after rebooting the machine.
    fi

  
    

}


clone_repro(){
    juju-log  "Fetching and installing dtn"
    status-set maintenance "Fetching and installing dtn"

    mkdir -p $dtn_path

    hg clone http://hg.code.sf.net/p/dtn/oasys $dtn_path/oasys
    hg clone http://hg.code.sf.net/p/dtn/DTN2 $dtn_path/DTN2
    juju-log  "Finished fetching and installing dtn"
}

build_dtn(){
    juju-log "building dtn module"

    cd $dtn_path/oasys
    ./configure
    make
    make install

    cd $dtn_path/DTN2
    ./configure --disable-ecl --disable-edp
    make

    juju-log "finished building dtn module"
    
}


run_dtn(){
# just a flag for start script to run the service 
    echo "1" > $CHARM_DIR/.dtn_running
}


set -eux
export DEBIAN_FRONTEND=noninteractive
source /$CHARM_DIR/utils/common
set_env_paths

# open-port 2152/udp

branch=`config-get branch`
revision=`config-get revision`
eth=`config-get eth`
 
echo "$branch" > $CHARM_DIR/.branch
echo "$revision" > $CHARM_DIR/.revision
echo "$eth" > $CHARM_DIR/.eth


install_packages
machine_type=`virt-what`

clone_repro

build_dtn

#add the oaieNB init
juju-log "Add dtn init script"
cp $CHARM_DIR/files/dtn /etc/init/dtn.conf

juju-log "Add dtn config file"
cp $CHARM_DIR/files/dtn-mini.conf /etc/dtn.conf

juju-log "Configure dtn"
mkdir -p /var/dtn/db /var/tmp/dtn/bundles
sed -i 's#REPLACE_PAYLOADDIR#/var/tmp/dtn#g' /etc/dtn.conf
sed -i 's#REPLACE_DBDIR#/var/dtn#g' /etc/dtn.conf
sed -i "s/REPLACE_INTERFACE/$eth/g" /etc/dtn.conf
$dtn_path/DTN2/daemon/dtnd -c /etc/dtn.conf --init-db
juju-log "Finished configuring"

run_dtn
status-set maintenance "DTN waiting to be run"
