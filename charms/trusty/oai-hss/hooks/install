#!/bin/bash
################################################################################
#
# Copyright (c) 2016, EURECOM (www.eurecom.fr)
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice, this
#    list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
# ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# The views and conclusions contained in the software and documentation are those
# of the authors and should not be interpreted as representing official policies,
# either expressed or implied, of the FreeBSD Project.
#
################################################################################
# file install 
# brief install the oai-hss from the openairinterface git repository
# author  navid.nikaein@eurecom.fr and A. B. Molini   

install_packages(){
    status-set maintenance "Installing some dependencies"
    
    gitAlreadyInstalled=$(dpkg --get-selections git 2>/dev/null | grep -c 'install') || true
    if [ ! $gitAlreadyInstalled -eq 1 ]; then # If git is NOT installed
	apt-get install -y --force-yes git  # Ensure necessary git dependency exist.
    fi
    atAlreadyInstalled=$(dpkg --get-selections at 2>/dev/null | grep -c 'install') || true
    if [ ! $atAlreadyInstalled -eq 1 ]; then 
	apt-get install -y --force-yes at
    fi
    virtwhatAlreadyInstalled=$(dpkg --get-selections virt-what 2>/dev/null | grep -c 'install') || true
    if [ ! $virtwhatAlreadyInstalled -eq 1 ]; then 
	apt-get install -y --force-yes virt-what
    fi 
    
    PASSWORD="linux"
    echo "mysql-server mysql-server/root_password password $PASSWORD" | debconf-set-selections
    echo "mysql-server mysql-server/root_password_again password $PASSWORD" | debconf-set-selections

    apt install -y mysql-client
}

clone_repo(){

    juju-log "Fetching and installing OpenAirInterface HSS"
    status-set maintenance "Fetching and installing OpenAirInterface HSS"
    
    echo -n | openssl s_client -showcerts -connect gitlab.eurecom.fr:443 2>/dev/null | sed -ne '/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p' >> /etc/ssl/certs/ca-certificates.crt
    
    if [ -d "$openair_path"  ]; then
	#   juju-log "Removing the installation directory"
	#   rm -rf $openair_path
	juju-log "Updating the installation directory"
	cd $openair_path
	git fetch --all
	git reset --hard HEAD 
	git checkout $branch 
	#git pull 
	shopt -s nocasematch
	if [[ "$revision" != "HEAD" ]]; then 
	    git checkout $revision
	fi 
	cd -
    else
	#Save the current hosts file
	cp -f /etc/hosts /home
	git clone --branch $branch https://gitlab.eurecom.fr/oai/openair-cn.git $openair_path
	cd $openair_path
	shopt -s nocasematch
	if [[ "$revision" != "HEAD" ]]; then 
	    git checkout $revision
	fi 
	cd -
    fi
  
    #We don't need phpmyadmin in the installation as it is provided by phpmyadmin charm
    #sed -i "s/phpmyadmin/#phpmyadmin/" $tools_path/build_helper
    sed -i '/phpmyadmin/d' $tools_path/build_helper
    #we don't either want the low latency kernel for HSS
    sed -i -r "s/(check_kernel_release_and_install_xtables_addons_oai[^()]+)/#\1/" $tools_path/build_helper  
    
}

juju_install_kernel(){

    juju-log "Check the kernel and update if required"
    check_current_kernel
    if [[ $REQUIRED_KERNEL_IS_INSTALLED == true ]]; then
	juju-log "required kernel is already installed"
	status-set maintenance "required kernel is already installed"
    else	
	if [ "$machine_type"  == "lxc" -o "$machine_type" == "docker" ]; then
	    juju-log "Can't install the required kernel in $machine_type env. Proceed with the current kernel."
	else  
	    if  [ "$machine_type"  == "" ] ; then 
		juju-log "Please install kerenel version 3.19 on the host".
	    else 
		check_current_kernel
		if [[ $REQUIRED_KERNEL_IS_INSTALLED == false ]]; then
		    # a way to avoid looping for lxc env.
		    if [ "$(cat $CHARM_DIR/.reboot)" != "reboot" ]; then  
			echo "reboot" > $CHARM_DIR/.reboot 
			juju-log "installing the required kernel and reboot"
			status-set maintenance "installing the required kernel and rebooting"
			install_required_kernel
    			juju-reboot --now
		    else 
			juju-log "Failed to install the kernel 3.19. Proceed with the current kernel."
		    fi 
		    #if we reboot now, the install is blocked here and reschedule after the reboot
		    #and xtables will be installed
		fi
	    fi
	fi 
    fi 
}

update_hostname(){
  HOSTNAME=`echo $JUJU_UNIT_NAME | sed 's|/|-|'`
  echo "$HOSTNAME" > /etc/hostname
  hostname $HOSTNAME
  echo "127.0.0.1 `hostname`" > /etc/hosts
}

configure_hosts(){
  realm=`config-get realm`
  echo $realm > $CHARM_DIR/.realm
  #define fqdn for MME
  if [ -z "$(grep -o "`hostname`.$realm" /etc/hosts)" ]; then
     echo 127.0.0.1 localhost > /etc/hosts
     echo 127.0.0.1 `hostname`.$realm `hostname` mme >> /etc/hosts
  fi
}

build_hss(){
  $build_run_scripts/build_hss -c -i -F
}

configure_hss(){
  juju-log "Add oai_hss init script"
  cp $CHARM_DIR/files/oai_hss /etc/init/oai_hss.conf

  $build_run_scripts/build_hss
  cp $openair_path/ETC/hss.conf $hss_conf/hss.conf
  cp $openair_path/ETC/hss_fd.conf $freediameter_conf_path/hss_fd.conf
  cp $openair_path/ETC/acl.conf $freediameter_conf_path/acl.conf

  # generate cert
  fqdn=`hostname --fqdn`
  $build_run_scripts/check_hss_s6a_certificate $freediameter_conf_path $fqdn
}

configure_network(){
  #allow dhcp
  local eth=$1
  if [ "$eth" = "eth0" ]; then
    echo "Ignore interface eth0"
    return
  fi
  local file=/etc/network/interfaces.d/${eth}.cfg
  cp ./files/eth1_tpl.cfg $file
  sed -i -e "s/eth1/$eth/g" $file

  #prevent dhcp gateway
  local hook=/etc/dhcp/dhclient-enter-hooks.d/net-${eth}
  cp ./files/dhclient_hook_tpl $hook
  sed -i -e "s/eth1/$eth/g" $hook
  chmod +x $hook
}

set -eux

export DEBIAN_FRONTEND=noninteractive
source $CHARM_DIR/utils/common
export juju=set

set_env_paths

branch=`config-get branch`
revision=`config-get revision`
echo "$branch" > $CHARM_DIR/.branch
echo "$revision" > $CHARM_DIR/.revision

update_hostname

install_packages
machine_type=`virt-what`

configure_network `config-get eth`

clone_repo

juju_install_kernel

configure_hosts

build_hss
configure_hss

status-set blocked "Waiting for a mysql/db relation to start"



