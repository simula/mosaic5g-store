#!/bin/bash
################################################################################
#
# Copyright (c) 2016, EURECOM (www.eurecom.fr)
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice, this
#    list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
# ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# The views and conclusions contained in the software and documentation are those
# of the authors and should not be interpreted as representing official policies,
# either expressed or implied, of the FreeBSD Project.
#
################################################################################
# file common
# brief common functions and variables
# author  navid.nikaein@eurecom.fr and A. B. Molini

set_env_paths(){

#paths in openair-cn on Git

  openair_path=/srv/openair-cn
  build_path=$openair_path/BUILD
  hss_path=$build_path/HSS
  epc_path=$build_path/EPC
  build_run_scripts=$openair_path/SCRIPTS
  tools_path=$build_path/TOOLS
  epc_conf_path=/usr/local/etc/oai
  epc_exec_name=mme
  freediameter_conf_path=$epc_conf_path/freeDiameter
}

check_epc_process(){

  IS_RUNNING=`service mme status`

  if [[ $IS_RUNNING =~ .*running.* ]]; then
     juju-log "MME is running...let's check if it is connected to HSS"
     status=0
  else
     juju-log "MME is not running..."
     status=1
  fi
}

check_epc_connection(){

  COUNTER=0
  while [ $COUNTER -lt 30 ]; do
     sleep 1
     if [ "$(grep -c "is now connected" /srv/mme.out)" -gt 0 ]; then
        juju-log "MME is running and connected to HSS"
        status-set active "MME is running and connected to HSS"
        break
     fi
     COUNTER=$((COUNTER+1))
  done

  if [ "$COUNTER" -eq 30 ]; then

        status-set maintenance "Make sure HSS is running...or wait for hooks to finish the execution..."
     #juju-log "EPC cannot connect to HSS...make sure the HSS service is running"
     #status-set blocked "EPC cannot connect to HSS...resolve...and try to upgrade the charm"
     #exit 1
     #non devo stopparlo, ma dire di aspettare...
     ##status-set maintenance "just waiting for hss to be running..."
     

  fi

}

user_conf(){
  juju-log "Setting up the config option chose by the user or the default ones"
  HOSTNAME=`hostname`

  #update sgw 
  sed -r -i "/SGW_IPV4_ADDRESS_FOR_S11/ s-\".*\"-\"$spgw_s11_ipv4\"-" $epc_conf_path/mme.conf

  # update hss
  hss_hostname=${hss_fqdn%%.*}
  if [ -z "$hss_hostname" ]; then
    hss_hostname='hss'
  fi
  sed -i -e "s/ConnectTo = \".*\"; /ConnectTo = \"$hss_hostname.$realm\"; /" $freediameter_conf_path/mme_fd.conf
  sed -i -e "s/ConnectPeer= .* {/ConnectPeer= \"$hss_hostname.$realm\" {/" $freediameter_conf_path/mme_fd.conf
  # should be w/o realm
  sed -r -i "/HSS_HOSTNAME/ s/\".*\"/\"$hss_hostname\"/" $epc_conf_path/mme.conf

  # update realm
  sed -i -e "s/Identity = \".*\";/Identity = \"$HOSTNAME.$realm\";/" $freediameter_conf_path/mme_fd.conf
  sed -i -e "s/Realm = \".*\";/Realm = \"$realm\";/" $freediameter_conf_path/mme_fd.conf
  sed -i -e "s/realm = \".*\";/realm = \"$realm\";/" $freediameter_conf_path/mme_fd.conf
  sed -r -i "/REALM/ s/\".*\"/\"$realm\"/" $epc_conf_path/mme.conf

  # update other
  sed -r -i "/MAXENB/ s/[0-9]+/$max_enb/" $epc_conf_path/mme.conf
  sed -r -i "/MAXUE/ s/[0-9]+/$max_ue/" $epc_conf_path/mme.conf
  sed -r -i "/RELATIVE_CAPACITY/ s/[0-9]+/$relative_capacity/" $epc_conf_path/mme.conf
  sed -r -i "/MME_STATISTIC_TIMER/ s/[0-9]+/$mme_statistic_timer/" $epc_conf_path/mme.conf
  sed -r -i "/EMERGENCY_ATTACH_SUPPORTED/ s/\".+\"/\"$emergency_attach_supported\"/" $epc_conf_path/mme.conf
  sed -r -i "/UNAUTHENTICATED_IMSI_SUPPORTED/ s/\".+\"/\"$authenticated_imsi_supported\"/" $epc_conf_path/mme.conf
  sed -r -i "/ASN1_VERBOSITY/ s/\".+\"/\"$verbosity\"/" $epc_conf_path/mme.conf

  #sed -r -i  "s/MCC=\"[0-9]+\"/MCC=\"$gummei_tai_mcc\"/" $epc_conf_path/epc.conf
  #sed -r -i "s/MNC=\"[0-9]+\"/MNC=\"$gummei_tai_mnc\"/" $epc_conf_path/epc.conf
  #sed -r -i "s/TAC=\"[0-9]+\"/TAC=\"$gummei_tai_tac\"/" $epc_conf_path/epc.conf

  #NETWORK CONFIG
  juju-log "Setting up network configuration in the epc.conf file"

  ipv4=`get_eth_ip_net $iface`

  #INTERFACES
  sed -r -i "/MME_INTERFACE_NAME_FOR_S1_MME/ s/\".*\"/\"$iface\"/" $epc_conf_path/mme.conf
  sed -r -i "/MME_IPV4_ADDRESS_FOR_S1_MME/ s-\".*\"-\"$ipv4\"-" $epc_conf_path/mme.conf

  sed -r -i "/MME_INTERFACE_NAME_FOR_S11_MME/ s/\".*\"/\"$iface\"/" $epc_conf_path/mme.conf
  sed -r -i "/MME_IPV4_ADDRESS_FOR_S11_MME/ s-\".*\"-\"$ipv4\"-" $epc_conf_path/mme.conf

  sed -r -i "/OUTPUT/ s/\".*\"/\"CONSOLE\"/" $epc_conf_path/mme.conf

}

install_required_kernel(){
  version=3.19
  wget -r -e robots=off --accept-regex "(.*lowlatency.*amd64)|(all).deb" http://kernel.ubuntu.com/~kernel-ppa/mainline/v${version}-vivid/
  dpkg -i kernel.ubuntu.com/*/*/*/*deb
}

check_current_kernel(){

  #required_kern_release=$(cat $tools_path/build_helper | egrep -o "check_kernel_release_and_install_xtables_addons_oai .+" | cut -d ' ' -f2)
  required_kern_release=3.19
  required_kern_version=`echo $required_kern_release | cut -d '.' -f1`
  required_kern_major_revision=`echo $required_kern_release | cut -d '.' -f2`
  current_kern_release=`uname -r`
  current_kern_version=`echo $current_kern_release | cut -d '.' -f1`
  current_kern_major_revision=`echo $current_kern_release | cut -d '.' -f2`
  if [ "$current_kern_version" -gt "$required_kern_version" ]; then
       REQUIRED_KERNEL_IS_INSTALLED="true"
  elif [ "$current_kern_version" -eq "$required_kern_version" ] && [ "$current_kern_major_revision" -ge "$required_kern_major_revision" ]; then
       REQUIRED_KERNEL_IS_INSTALLED="true"
  else
       REQUIRED_KERNEL_IS_INSTALLED="false"
  fi

}

# get from http://www.linuxjournal.com/content/validating-ip-address-bash-script
validate_ip() {

  local  ip=$1
  local  stat=1

  if [[ $ip =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
      OIFS=$IFS
      IFS='.'
      ip=($ip)
      IFS=$OIFS
      [[ ${ip[0]} -le 255 && ${ip[1]} -le 255 \
          && ${ip[2]} -le 255 && ${ip[3]} -le 255 ]]
      stat=$?
  fi
  return $stat
}

validated_mme_public_ip=0

get_ip_address(){

  local  ip=$1
  local  status=1
  local  status_after=1

  if ! validate_ip $ip; then
      ip=`host $ip | awk '{ print $4 }'`
  fi

  validate_ip $ip

  status=$?
  if [ "$status" == "1" ] ; then 
      echo "doing nslookup for the mme host name $ip"
      juju-log "perfroming nslookup for the mme host name ($ip)"
      validated_mme_public_ip=`nslookup $ip | awk ' FNR == 5 {print $2 }'`
      status_after=$(validate_ip $ip)
      if [ "$status_after" == 1 ] ; then 
  	echo "nslookup failed for the mme host name $ip"
  	juju-log "nslookup failed for the mme host name ($ip)"
  	return $status_after
      else 
  	echo "MME ip address is $validated_public_mme_ip"
  	return 0
      fi
  else 
      validated_mme_public_ip=$ip
      echo "MME ip address is $validated_mme_public_ip"
      return 0
  fi 

}

get_eth_ip(){
  echo `ip addr show $1 | grep -o 'inet [0-9]\+\.[0-9]\+\.[0-9]\+\.[0-9]\+' | grep -o [0-9].*`
}

get_eth_ip_net(){
  echo `ip addr show $1 | grep -o 'inet [0-9]\+\.[0-9]\+\.[0-9]\+\.[0-9]\+/[0-9]\+' | grep -o [0-9].*`
}
