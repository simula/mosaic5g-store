#!/bin/bash
################################################################################
#
# Copyright (c) 2016, EURECOM (www.eurecom.fr)
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice, this
#    list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
# ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# The views and conclusions contained in the software and documentation are those
# of the authors and should not be interpreted as representing official policies,
# either expressed or implied, of the FreeBSD Project.
#
################################################################################
# file install
# brief install the oai-epc from the openairinterface git repository
# author  navid.nikaein@eurecom.fr and A. B. Molini   

install_packages(){
    gitAlreadyInstalled=$(dpkg --get-selections git 2>/dev/null | grep -c 'install') || true
    if [ ! $gitAlreadyInstalled -eq 1 ]; then 
	# If git is NOT installed
	apt-get install -y  --force-yes  git 
	# Ensure necessary git dependency exist.
    fi
    atAlreadyInstalled=$(dpkg --get-selections at 2>/dev/null | grep -c 'install') || true
    if [ ! $atAlreadyInstalled -eq 1 ]; then 
	# If at command is NOT installed
	apt-get install -y --force-yes at
	# Ensure at command exists to let juju reschedule this hook after rebooting the machine.
    fi
    virtwhatAlreadyInstalled=$(dpkg --get-selections virt-what 2>/dev/null | grep -c 'install') || true
    if [ ! $virtwhatAlreadyInstalled -eq 1 ]; then 
	apt-get install -y --force-yes virt-what
    fi

    #Mysql-server simply because we want resolveip tool
    PASSWORD="linux"
    echo "mysql-server mysql-server/root_password password $PASSWORD" | debconf-set-selections
    echo "mysql-server mysql-server/root_password_again password $PASSWORD" | debconf-set-selections

    apt install -y mysql-client
}

clone_repro(){
    juju-log "Fetching and installing openair5G EPC"
    status-set maintenance "Fetching and installing Openair5G EPC"
    
    echo -n | openssl s_client -showcerts -connect gitlab.eurecom.fr:443 2>/dev/null | sed -ne '/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p' >> /etc/ssl/certs/ca-certificates.crt
    #everytime refresh the installation 
    if [ -d "$openair_path"  ]; then
	#juju-log "Removing the installation directory"
	#rm -rf $openair_path
	juju-log "Updating the installation directory"
	cd $openair_path 
	git reset --hard HEAD
	git checkout $branch 
	git pull
	shopt -s nocasematch 
	if [[ "$revision" != "HEAD" ]]; then  
	    git checkout $revision
	fi
	cd -
    else
	#Save the current hosts file
	cp -f /etc/hosts /home
	git clone https://gitlab.eurecom.fr/oai/openair-cn.git $openair_path
	cd $openair_path
	git checkout $branch 
	shopt -s nocasematch
	if [[ "$revision" != "HEAD" ]]; then  
	    git checkout $revision
	fi 
	cd -
    fi
  
    #We don't need phpmyadmin in the installation as it is provided by phpmyadmin charm
    #sed -i "s/phpmyadmin/#phpmyadmin/" $tools_path/build_helper
    sed -i '/phpmyadmin/d' $tools_path/build_helper
    sed -i -r "s/(check_kernel_release_and_install_xtables_addons_oai[^()]+)/#\1/" $tools_path/build_helper

}

juju_install_kernel(){

    juju-log "Check the kernel and update if required"
    check_current_kernel
    if [[ $REQUIRED_KERNEL_IS_INSTALLED == true ]]; then
	status-set maintenance "required kernel is already installed"
    else	
	if [ "$machine_type"  == "lxc" -o "$machine_type" == "docker" ]; then 
	    juju-log "Can't install the required kernel in $machine_type env. Either deploy oai-epc with kvm or make sure that the host has the required version and kernel modules".
	    status-set error "Can't install the required kernel 3.19"
	else 
	    if  [ "$machine_type"  == "" ] ; then 
		juju-log "Please install kerenel version 3.19 on the host".
	    else 
		check_current_kernel
		if [[ $REQUIRED_KERNEL_IS_INSTALLED == false ]]; then
		    if [ "$(cat $CHARM_DIR/.reboot)" != "reboot" ]; then  
			juju-log "installing the required kernel and reboot"
			status-set maintenance "installing the required kernel and rebooting"
			install_required_kernel
  			echo "reboot" > $CHARM_DIR/.reboot 
			juju-reboot --now
		    else 
			juju-log "Can't install the required kernel."
			status-set error "Can't install the required kernel"
		    fi 
		fi
	    fi 
	fi
    fi
}

update_hostname(){
  HOSTNAME=`echo $JUJU_UNIT_NAME | sed 's|/|-|'`
  echo "$HOSTNAME" > /etc/hostname
  hostname $HOSTNAME
  echo "127.0.0.1 `hostname`" > /etc/hosts
}

configure_hosts(){
  realm=`config-get realm`
  #define fqdn for MME
  if [ -z "$(grep -o "`hostname`.$realm" /etc/hosts)" ]; then
     echo 127.0.0.1 localhost > /etc/hosts
     echo 127.0.0.1 `hostname`.$realm `hostname` mme >> /etc/hosts
  fi
}

build_epc(){
    juju-log "Build EPC and install required packages"
    status-set maintenance "Build EPC and install required packages"
    $build_run_scripts/build_epc -c -i -f >& /srv/.build_epc_install.log
    #$build_run_scripts/build_epc -t -f 
    
    source $tools_path/build_helper
    install_xtables_addons_oai 1
    
    #In the epc.conf there will be the local hostname as HSS_HOSTNAME, basically
    #like HSS was on the same machine of EPC. It is the default if you don't
    #give any hss name in input to build_epc script.
    #So we can't start the final executable because we would get an error 
    #so we need to wait for a relation.

    $build_run_scripts/build_epc -c -H "unknown.$realm" >& /srv/.build_epc_compile.log
    status=$?
    if [ "$status" != 0 ]; then 
	$build_run_scripts/build_epc -c -i -f
	#  $build_run_scripts/build_epc -t -f 
	$build_run_scripts/build_epc -c -H "unknown.$realm"
    fi 

}

set -eux

export DEBIAN_FRONTEND=noninteractive
source $CHARM_DIR/utils/common
set_env_paths

open-port 2152/udp

branch=`config-get branch`
revision=`config-get revision`
echo "$branch" > $CHARM_DIR/.branch
echo "$revision" > $CHARM_DIR/.revision

update_hostname

install_packages
machine_type=`virt-what`

clone_repro

juju_install_kernel

configure_hosts

build_epc


if [ ! -f $CHARM_DIR/.tac_list ]; then
   touch $CHARM_DIR/.tac_list
fi

#add the mme-gw init
juju-log "Add mme-gw init script"
cp $CHARM_DIR/files/mme_gw /etc/init/mme_gw.conf


if [ ! -f /usr/local/bin/mme_gw ] ; then
 status-set error "mme_gw compilation failed! Try increasing the size of Virtual Memory if only 512M and retry!"
 exit  1
fi

status-set blocked "Waiting for active connection with HSS to actually run EPC...add hss relation"
