#!/bin/sh

. $SNAP/common

export UHD_IMAGES_DIR=$SNAP/uhd_images
export UHD_RFNOC_DIR=$SNAP/usr/share/uhd/rfnoc/blocks

if [ ! -e $ENB_EXEC ]; then
    echo "Cannot find $ENB_EXEC executable"
    exit 127
fi		   	   

if [ ! -e $CUDU_EXEC ]; then
    echo "Cannot find $CUDU_EXEC executable"
    exit 127
fi		   	   

if [ ! -e $RRU_EXEC ]; then
    echo "Cannot find $RRU_EXEC executable"
    exit 127
fi		   	   


if [ -r $SNAP_DATA/config_enb.sh ]; then
    . $SNAP_DATA/config_enb.sh
fi

if [ -r $SNAP_DATA/config_cudu.sh ]; then
    . $SNAP_DATA/config_cudu.sh
fi

if [ -r $SNAP_DATA/config_rru.sh ]; then
    . $SNAP_DATA/config_rru.sh
fi


ENB_CONFIG=${ENB_CONF_FILE2:-$ENB_CONF_FILE}
ENB_EXEC_ARGS=" -O $ENB_CONFIG"

CUDU_CONFIG=${CUDU_CONF_FILE2:-$CUDU_CONF_FILE}
CUDU_EXEC_ARGS=" -O $CUDU_CONFIG"

RRU_CONFIG=${RRU_CONF_FILE2:-$RRU_CONF_FILE}
RRU_EXEC_ARGS=" -O $RRU_CONFIG"


case "$1" in
    "gdb-enb" )
	echo "Running $SNAP_NAME-ENB with the gdb"
	touch      $SNAP_DATA/.gdb_$SNAP_NAME
	chmod 777  $SNAP_DATA/.gdb_$SNAP_NAME
	echo "file $ENB_EXEC"        > $SNAP_DATA/.gdb_$SNAP_NAME
	echo "set args $ENB_EXEC_ARGS" >> $SNAP_DATA/.gdb_$SNAP_NAME
	echo "run"                     >> $SNAP_DATA/.gdb_$SNAP_NAME
	cat $SNAP_DATA/.gdb_$SNAP_NAME
	exec $SNAP/gdb --data-directory=$SNAP_DATA  -n -x $SNAP_DATA/.gdb_$SNAP_NAME
	;;
    "gdb-cudu" )
	echo "Running $SNAP_NAME-CUDU with the gdb"
	touch      $SNAP_DATA/.gdb_$SNAP_NAME
	chmod 777  $SNAP_DATA/.gdb_$SNAP_NAME
	echo "file $CUDU_EXEC"        > $SNAP_DATA/.gdb_$SNAP_NAME
	echo "set args $CUDU_EXEC_ARGS" >> $SNAP_DATA/.gdb_$SNAP_NAME
	echo "run"                     >> $SNAP_DATA/.gdb_$SNAP_NAME
	cat $SNAP_DATA/.gdb_$SNAP_NAME
	exec $SNAP/gdb --data-directory=$SNAP_DATA  -n -x $SNAP_DATA/.gdb_$SNAP_NAME
	;;
    
    "info" )
	shift 
	echo "Please manually run: snap info $SNAP_NAME "
	;; 
    "start"  )
	daemon=$2
	shift 2
	snapctl start --enable $SNAP_NAME.$daemon "$@"
	#snap start $SNAP_NAME.$daemon  "$@"
	;;
    "stop" )
	daemon=$2
	shift 2
	snapctl stop --disable $SNAP_NAME.$daemon "$@"
	#snap stop $SNAP_NAME.$daemon  "$@"
	;;
    "restart" )
	daemon=$2
	shift 2
	snapctl stop $SNAP_NAME.$daemon "$@"
	snapctl start --enable $SNAP_NAME.$daemon "$@"
	#snapctl restart $SNAP_NAME.$daemon "$@"
	#snap restart $SNAP_NAME.$daemon  "$@"
	;;
    "status" )
	daemon=$2
	shift 2
	echo "Please manually run: snap services $SNAP_NAME.$daemon" 
	snapctl services $SNAP_NAME.$daemon 
	#systemctl status --lines 0 snap.$SNAP_NAME.$2.service
	;;
    "journal" )
	daemon=$2
	shift 2
	journalctl -u snap.$SNAP_NAME.$daemon.service "$@"
	;;
    "help" )
	echo "Usage:                    sudo $SNAP_NAME.[x] args"
	echo "                          App [x] is enb, cudu, and rru"
	echo "Note:                     root priviliage required"
	echo "Options:"
	echo "oai-ran.info              get the info for this snap"     
	echo "oai-ran.test              test snap services" 
	echo "oai-ran.init              initialize $SNAP_NAME (after the 1st installation)"
	echo ""
	echo "oai-ran.[x]               run the App [x] manually"
	echo "oai-ran.[x]-conf-get      get the current $SNAP_NAME.[X] configuration file"
	echo "oai-ran.[x]-conf-list     list the $SNAP_NAME.[x] configuration files"
	echo "oai-ran.[x]-conf-set      set the $SNAP_NAME.[x] configuration file"
	echo "oai-ran.[x]-conf-show     show the path to the $SNAP_NAME.[x] configuration file"
	echo "oai-ran.[x]-debug         debug the $SNAP_NAME.[x] with gdb, only valid for enb and cudu"
	echo "oai-ran.[x]-journal       get the $SNAP_NAME.[x] daemon logs"
	echo "oai-ran.[x]-restart       restart the $SNAP_NAME.[x] daemon"
	echo "oai-ran.[x]-start         start the $SNAP_NAME.[x] daemon"
	echo "oai-ran.[x]-status        status the $SNAP_NAME.[x] daemon"
	echo "oai-ran.[x]-stop          stop the $SNAP_NAME.[x] daemon"
	echo ""
	echo "  help:                   print this help"
	;;

    "cudu")
	shift 
	echo "$CUDU_EXEC  $CUDU_EXEC_ARGS $@"
	$CUDU_EXEC  `echo $CUDU_EXEC_ARGS` "$@"
	;;
    
    "rru")
	shift 
	echo "$RRU_EXEC  $RRU_EXEC_ARGS $@"
	$RRU_EXEC  `echo $RRU_EXEC_ARGS` "$@"
	;;
    
    "enb")
	shift 
	echo "$ENB_EXEC  $ENB_EXEC_ARGS $@"
	$ENB_EXEC  `echo $ENB_EXEC_ARGS` "$@"
	;;
     * )
	echo "unknow run command $1"
	;;

esac
