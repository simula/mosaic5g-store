#! /bin/bash
################################################################################
# Licensed to the Mosaic5G under one or more contributor license
# work for additional information regarding copyright ownership.
# Apache License, Version 2.0  (the "License");
# You may obtain a copy of the License at
#  
#    	http://www.apache.org/licenses/LICENSE-2.0
#  
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
# -------------------------------------------------------------------------------
#   For more information about the Mosaic5G:
#   	contact@mosaic-5g.io
#
#
################################################################################
# file run
# brief run scripts and variables for oai-ran Snap
# author Navid Nikaein (navid.nikaein@eurecom.fr, navid.nikaein@mosaic-5g.io)


. $SNAP/common
. $SNAP/util

export UHD_IMAGES_DIR=$(snapctl get conf.usrp) # $SNAP/uhd_images
export UHD_RFNOC_DIR=$(snapctl get conf.rfnoc) #$SNAP/usr/share/uhd/rfnoc/blocks
export LD_LIBRARY_PATH="$SNAP/lib:$SNAP/lib/x86_64-linux-gnu:$SNAP/$SNAP/usr/lib/x86_64-linux-gnu:$SNAP/usr/lib:$LD_LIBRARY_PATH"


if [ ! -e $ENB_EXEC ]; then
    echo_error "Cannot find $ENB_EXEC executable"
    exit 127
fi		   	   

if [ ! -e $GNB_EXEC ]; then
    echo_error "Cannot find $GNB_EXEC executable"
    exit 127
fi		   	   


if [ -r $SNAP_DATA/config_enb.sh ]; then
    . $SNAP_DATA/config_enb.sh
fi

if [ -r $SNAP_DATA/config_gnb.sh ]; then
    . $SNAP_DATA/config_gnb.sh
fi

if [ -r $SNAP_DATA/config_bbu.sh ]; then
    . $SNAP_DATA/config_bbu.sh
fi

if [ -r $SNAP_DATA/config_rru.sh ]; then
    . $SNAP_DATA/config_rru.sh
fi


ENB_CONFIG=${ENB_CONF_FILE2:-$ENB_CONF_FILE}
ENB_EXEC_ARGS=" -O $ENB_CONFIG"

GNB_CONFIG=${GNB_CONF_FILE2:-$GNB_CONF_FILE}
GNB_EXEC_ARGS=" -O $GNB_CONFIG"

BBU_CONFIG=${BBU_CONF_FILE2:-$BBU_CONF_FILE}
BBU_EXEC_ARGS=" -O $BBU_CONFIG"

RRU_CONFIG=${RRU_CONF_FILE2:-$RRU_CONF_FILE}
RRU_EXEC_ARGS=" -O $RRU_CONFIG"


case "$1" in
    "openapi" )
	shift
	python3 $SNAP/api.py "$@"
	;;

    "openapiman" )
	shift
	python3 $SNAP/api-manager.py "$@"
	;;
	
    "gdb-enb" )
	echo "Running $SNAP_NAME-ENB with the gdb"
	touch      $SNAP_DATA/.gdb_$SNAP_NAME
	chmod 777  $SNAP_DATA/.gdb_$SNAP_NAME
	echo "file $ENB_EXEC"        > $SNAP_DATA/.gdb_$SNAP_NAME
	echo "set args $ENB_EXEC_ARGS" >> $SNAP_DATA/.gdb_$SNAP_NAME
	echo "run"                     >> $SNAP_DATA/.gdb_$SNAP_NAME
	cat $SNAP_DATA/.gdb_$SNAP_NAME
	exec $SNAP/gdb --data-directory=$SNAP_DATA  -n -x $SNAP_DATA/.gdb_$SNAP_NAME
	;;
    "gdb-cudu" )
	echo "Running $SNAP_NAME-CUDU with the gdb"
	touch      $SNAP_DATA/.gdb_$SNAP_NAME
	chmod 777  $SNAP_DATA/.gdb_$SNAP_NAME
	echo "file $CUDU_EXEC"        > $SNAP_DATA/.gdb_$SNAP_NAME
	echo "set args $CUDU_EXEC_ARGS" >> $SNAP_DATA/.gdb_$SNAP_NAME
	echo "run"                     >> $SNAP_DATA/.gdb_$SNAP_NAME
	cat $SNAP_DATA/.gdb_$SNAP_NAME
	exec $SNAP/gdb --data-directory=$SNAP_DATA  -n -x $SNAP_DATA/.gdb_$SNAP_NAME
	;;
    
    "info" )
	shift 
	snap_info
	;; 

    "start"  )
	daemon=$2
	shift 2
	if_sudo
	snapctl start --enable $SNAP_NAME.$daemon "$@"
	snapctl services $SNAP_NAME.$daemon
	;; 

    "start-all"  )
	daemon=$2
	shift
	if_sudo
	snapctl start --enable $SNAP_NAME "$@"
	snapctl services $SNAP_NAME	
	
	;;
    "stop" )
	daemon=$2
	shift 2
	if_sudo
	snapctl stop --disable $SNAP_NAME.$daemon "$@"
	snapctl services $SNAP_NAME.$daemon
	
	;;
    "stop-all" )
	daemon=$2
	shift
	if_sudo
	snapctl stop --disable $SNAP_NAME "$@"
	snapctl services $SNAP_NAME

	;;
    "restart" )
	daemon=$2
	shift 2
	if_sudo
	snapctl stop --disable $SNAP_NAME.$daemon "$@"
	snapctl start --enable $SNAP_NAME.$daemon "$@"
	snapctl services $SNAP_NAME.$daemon
	
	;;
    "status" )
	daemon=$2
	shift 2
	# echo "Please manually run: snap services $SNAP_NAME.$daemon" 
	snapctl services $SNAP_NAME.$daemon 
	#systemctl status --lines 0 snap.$SNAP_NAME.$2.service
	;; 
    "status-all"  )
	daemon=$2
	shift
	snapctl services $SNAP_NAME
	;;

    "journal" )
	daemon=$2
	shift 2
	snap_isconnected log-observe
	journalctl -u snap.$SNAP_NAME.$daemon.service "$@"
	;;

    "help" )
	snap_help
	;;

    "BBU")
	shift 
	echo_info "$ENB_EXEC  $CUDU_EXEC_ARGS $@"
	$ENB_EXEC  `echo $CUDU_EXEC_ARGS` "$@"
	;;
    
    "rru")
	shift 
	echo_info "$RRU_EXEC  $RRU_EXEC_ARGS $@"
	$ENB_EXEC  `echo $RRU_EXEC_ARGS` "$@"
	;;
    
    "enb")
	shift 
	if_sudo
	snap_isconnected network-control
	snap_isconnected netlink-connector
	snap_isconnected process-control
	snap_isconnected cpu-control
        #detect_uhd_device
	#if [ "$DEVICE" == "B" ]; then 
	#    snap_isconnected raw-usb
	#fi
	export LD_LIBRARY_PATH="$SNAP/lib/enb:$LD_LIBRARY_PATH"
        echo "Device: $DEVICE-Series"
	echo_info "$ENB_EXEC  $ENB_EXEC_ARGS $@"
	$ENB_EXEC  `echo $ENB_EXEC_ARGS` "$@"
	;;
    "gnb")
	shift 
	if_sudo
	snap_isconnected network-control
	snap_isconnected netlink-connector
	snap_isconnected process-control
	snap_isconnected cpu-control
	
	#detect_uhd_device
	#if [ "$DEVICE" == "B" ]; then 
	#    echo_info "Detected USRP B-Series, Adding option -E"
	#    GNB_EXEC_ARGS=$GNB_EXEC_ARGS" -E" 
	#    snap_isconnected raw-usb
	#fi
	export LD_LIBRARY_PATH="$SNAP/lib/gnb:$LD_LIBRARY_PATH"
	echo ""
	echo_info "$GNB_EXEC  $GNB_EXEC_ARGS $@"
	$GNB_EXEC  `echo $GNB_EXEC_ARGS` "$@"
	;;
     * )
	echo_warn "unknow run command $1"
	;;

esac

set_health
