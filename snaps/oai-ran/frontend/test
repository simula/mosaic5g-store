#! /bin/bash
################################################################################
# Licensed to the Mosaic5G under one or more contributor license
# work for additional information regarding copyright ownership.
# Apache License, Version 2.0  (the "License");
# You may obtain a copy of the License at
#  
#    	http://www.apache.org/licenses/LICENSE-2.0
#  
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
# -------------------------------------------------------------------------------
#   For more information about the Mosaic5G:
#   	contact@mosaic-5g.io
#
#
################################################################################
# file test
# brief test scripts and variables for oai-ran Snap
# author Navid Nikaein (navid.nikaein@eurecom.fr, navid.nikaein@mosaic-5g.io)


. $SNAP/common
. $SNAP/util

export UHD_IMAGES_DIR=$(snapctl get conf.usrp) # $SNAP/uhd_images
export UHD_RFNOC_DIR=$(snapctl get conf.rfnoc) #$SNAP/usr/share/uhd/rfnoc/blocks
export LD_LIBRARY_PATH="$SNAP/usr/lib/x86_64-linux-gnu:$SNAP/usr/lib:$LD_LIBRARY_PATH"

waiting_time=1
waiting_time2=30
check_string="No USRP Device Found"
check_string_sdr="got sync"
d="d"
node="enb"

if_sudo
snap_isconnected log-observe
snap_isconnected network-control
snap_isconnected netlink-connector
snap_isconnected process-control
snap_isconnected cpu-control

detect_uhd_device
if [ "$DEVICE" == "B" ]; then 
    snap_isconnected raw-usb
fi
	

echo_info "Init"
$SNAP/init

enb_conf=$(snapctl get conf.enb)
gnb_conf=$(snapctl get conf.gnb)

echo ""
echo_info "Services"
$SNAP/run status-all
sleep $waiting_time 
echo_info "Start $node$d"
$SNAP/run start "$node$d" 
sleep $waiting_time
echo_info "Stop $node$d"
$SNAP/run stop "$node$d"
sleep $waiting_time
$SNAP/run status-all

sleep $waiting_time 
$SNAP/run status-all
sleep $waiting_time 

echo_info "Stop All"
$SNAP/run stop-all
sleep $waiting_time

echo ""
echo_info "Check and set enb conf"
$SNAP/conf ls-$node
$SNAP/conf set-$node $enb_conf

echo ""
echo_info "Start OpenAPI"
$SNAP/run start apid
$SNAP/run journal apid -e -n20 |  egrep -i "Starting Open API|Starting OpenAPI" > /dev/null 2>&1

if [ $? -eq 0 ] ; then
    echo_success "apid test: passed"
else
    echo_error   "apid test: failed"
fi

echo ""
echo_info "Snap Info"
$SNAP/run info

echo ""
echo_info "Check $node exec"
$SNAP/conf set-$node $enb_conf
$SNAP/run start "$node$d"
sleep $waiting_time2
$SNAP/run stop "$node$d"

$SNAP/run journal enbd -e -n 500 | egrep "$check_string_sdr|$check_string" > /dev/null 2>&1
if [ $? -eq 0 ] ; then
    echo_success "$node Exec: passed"
else
    echo_error   "$node exec: failed"
    exit 1
fi

node="gnb"
echo ""
echo_info "Check $node exec"
$SNAP/conf set-$node $gnb_conf
$SNAP/run start "$node$d"
sleep $waiting_time2
$SNAP/run stop "$node$d"

$SNAP/run journal gnbd -e -n 500 | egrep "$check_string_sdr|$check_string" > /dev/null 2>&1
if [ $? -eq 0 ] ; then
    echo_success "$node Exec: passed"
else
    echo_error   "$node exec: failed"
    exit 1
fi

#$SNAP/run $node | grep "$check_string" > /dev/null 2>&1
#if [ $? -eq 0 ] ; then
#    echo_success "$node Exec: passed"
#else
#    echo_error   "$node exec: failed"
#    exit 1
#fi

#node="gnb"
#echo_info "Check $node exec"
#$SNAP/conf set-$node "$node"_conf
#$SNAP/run $node  | grep "$check_string" > /dev/null 2>&1
#if [ $? -eq 0 ] ; then
#    echo_success "$node Exec: passed"
#else
#    echo_error   "$node exec: failed"
#    exit 1
#fi
