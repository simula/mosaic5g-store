#!/bin/sh

. $SNAP/common

CURRENT_PATH=$(dirname $(readlink -f $0))
. $CURRENT_PATH/util

if [ -r $SNAP_DATA/config_hss.sh ]; then
    . $SNAP_DATA/config_hss.sh
fi
HSS_CONFIG=${HSS_CONF_FILE2:-$HSS_CONF_FILE}
HSS_EXEC_ARGS=" -j $HSS_CONFIG "


HSS_FD_CONF_FILE2=$(dirname $HSS_CONFIG)/hss_rel14_fd.conf
HSS_FD_CONFIG=${HSS_FD_CONF_FILE2:-$HSS_FD_CONF_FILE}

MYSQL_SERVER=`cat $HSS_CONFIG | grep  MYSQL_server  | cut -f2 -d'"'`
MYSQL_USER=`cat $HSS_CONFIG | grep  MYSQL_user  | cut -f2 -d'"'`
MYSQL_PW=`cat $HSS_CONFIG | grep  MYSQL_pass  | cut -f2 -d'"'`
REALM=`cat $HSS_FD_CONF_FILE | grep  "Realm "  | cut -f2 -d'"'`
USER_KEY=8BAF473F2F8FD09487CCCBD7097C6862
SQN=000000000021
OP_KEY=`cat $HSS_CONF_FILE | grep -m1 OPERATOR_key | cut -f2 -d '"'`
OPC="8E27B6AF0E692E750F32667A3B14605D"

HSS_APN_DEFAULT="default"
HSS_APN_ALT="internet"
HSS_APN_OAI="oai."$REALM
IMSI_FIRST3=208930000000001
IMSI_FIRST4=208940000000001
IMSI_FIRST5=208950000000001
MSISDN_FIRST=001011234561000
MME_ID=3
MME_ISDN=208
MME_IDENTITIY=`hostname`"."$REALM
HSS_NUM_USER=40
Cassandra_Server_IP=`cat $HSS_CONF_FILE | grep cassandra_Server_IP | cut -d "#" -f1 | tr -d ";" | cut -f3 -d' '`

	
if [ ! -e $HSS_EXEC ]; then
    echo "Cannot find $HSS_EXEC executable"
    exit -1 
fi		   	   

export LD_LIBRARY_PATH="$SNAP/usr/lib/freeDiameter:$SNAP/usr/lib/x86_64-linux-gnu:$LD_LIBRARY_PATH"

	 
case "$1" in
    "gdb" )
	echo "Running $2 with the gdb"
	touch      $SNAP_DATA/.gdb_$2
	chmod 777  $SNAP_DATA/.gdb_$2
	echo "file ${2^^}_EXEC"        > $SNAP_DATA/.gdb_$2
	echo "set args ${2^^}_EXEC_ARGS" >> $SNAP_DATA/.gdb_$2
	echo "run"                     >> $SNAP_DATA/.gdb_$2
	cat $SNAP_DATA/.gdb_$2
	exec $SNAP/gdb --data-directory=$SNAP_DATA  -n -x $SNAP_DATA/.gdb_$2
	;;
    
     "info" )
	#snap info $SNAP_NAME
	shift 
	echo "Please manually run: snap info $SNAP_NAME "

	;; 
    
     "start"  )
	 #snap start $SNAP_NAME
	 shift 
	 snapctl start --enable $SNAP_NAME "$@"
	 ;;

     "stop" )
	#snap stop $SNAP_NAME
	 shift 
	 snapctl stop --disable $SNAP_NAME "$@"
	 ;;

     "restart" )
	 #snap restart $SNAP_NAME
	 shift 
	 snapctl stop --disable $SNAP_NAME "$@"
	 snapctl start --enable $SNAP_NAME "$@"
	 
	;;

     "status" )
	 #snap services $SNAP_NAME
	 shift
	 snapctl services $SNAP_NAME "$@"
	 ;;
    "journal" )
	journalctl -u snap.$SNAP_NAME.service "$@"
	;;
    
    "help" )
	echo "Usage:   sudo  $SNAP_NAME.[options] args"
	echo "Note:    need root priviliage"
	echo "Options:"
	echo "  start:        start the $SNAP_NAME.mmed daemon"
	echo "  stop:         stop the $SNAP_NAME.mmed daemon"
	echo "  restart:      restart the $SNAP_NAME.mmed daemon"
	echo "  status:       get the $SNAP_NAME.mmed status"
	echo "  journal:      get the $SNAP_NAME.mmed logs"
	echo ""
	echo "  init:         initialize MME"
	echo "  conf-set:     set the MME configuration file"
	echo "  conf-get:     get the current MME configuration file (mme.conf)"
	echo "  conf-show:    show the path to the MME configuration file (mme.conf)"
	echo "  conf-list:    list all the SPGW configuration files (mme.conf, mme_fd)"
	echo ""
	echo "  help:         print this help"
	echo "  Example:      sudo oai-mme.init; sudo oai-mme;"
	
	;;

    "provision-user-cassandra" | "reset-db" )
	check_cassandra_service
	
	# provisin 208930000000001
	echo "$SNAP/data_provisioning_users --apn $HSS_APN_OAI --apn2 $HSS_APN_DEFAULT --key $OPC --imsi-first $IMSI_FIRST3 --msisdn-first $MSISDN_FIRST --mme-identity $MME_IDENTITIY --no-of-users $HSS_NUM_USER --realm $REALM --sqn $SQN --truncate True  --verbose True --cassandra-cluster $Cassandra_Server_IP"

	python3 $SNAP/data_provisioning_users --apn $HSS_APN_OAI --apn2 $HSS_APN_DEFAULT --key $OPC --imsi-first $IMSI_FIRST3 --msisdn-first $MSISDN_FIRST --mme-identity $MME_IDENTITIY --no-of-users $HSS_NUM_USER --realm $REALM --sqn $SQN --truncate True  --verbose True --cassandra-cluster $Cassandra_Server_IP

	echo ""
	#provisin 208940000000001
	python3 $SNAP/data_provisioning_users --apn $HSS_APN_OAI --apn2 $HSS_APN_DEFAULT --key $OPC --imsi-first $IMSI_FIRST4 --msisdn-first $MSISDN_FIRST --mme-identity $MME_IDENTITIY --no-of-users $HSS_NUM_USER --realm $REALM  --sqn $SQN --truncate False --verbose True --cassandra-cluster $Cassandra_Server_IP

	echo ""
	#provisin 208950000000001
	python3 $SNAP/data_provisioning_users --apn $HSS_APN_OAI --apn2 $HSS_APN_DEFAULT --key $OPC --imsi-first $IMSI_FIRST5 --msisdn-first $MSISDN_FIRST --mme-identity $MME_IDENTITIY --no-of-users $HSS_NUM_USER --realm $REALM  --sqn $SQN --verbose True --truncate False --cassandra-cluster $Cassandra_Server_IP

	;;

     "add-users" )
	check_cassandra_service
       
	if [ $# -lt 10 ] ; then
	    python3 $SNAP/data_provisioning_users --cassandra-cluster $Cassandra_Server_IP -h
	    echo ""
	    echo "Note: if truncate is true, then the previous user base will be overwritten"
	    echo ""
	    echo "Example:"
	    echo "$add-user --apn $HSS_APN_OAI --apn2 $HSS_APN_DEFAULT --key $OPC --imsi-first $IMSI_FIRST3 --msisdn-first $MSISDN_FIRST --mme-identity $MME_IDENTITIY --no-of-users $HSS_NUM_USER --realm $REALM --verbose True --cassandra-cluster $Cassandra_Server_IP"
	    return 1
	fi
	shift 
	python3 $SNAP/data_provisioning_users "$@" $*
	;;

     "dump-users" )
	 
	 python3 $SNAP/dump_users --cassandra-cluster $Cassandra_Server_IP
	 ;;
     
    "provision-mme-cassandra" )
	shift
	check_cassandra_service
	echo ""
	echo "$SNAP/data_provisioning_mme  --id $MME_ID --mme-isdn $MME_ISDN --mme-identity $MME_IDENTITIY --realm $REALM --ue-reachability 1 --truncate True  --verbose True --cassandra-cluster $Cassandra_Server_IP"
	python3 $SNAP/data_provisioning_mme --id $MME_ID --mme-isdn $MME_ISDN --mme-identity $MME_IDENTITIY --realm $REALM --ue-reachability 1 --truncate True  --verbose True --cassandra-cluster $Cassandra_Server_IP

	;;

    "add-mme" )
       
	check_cassandra_service 
	if [ $# -lt 2 ] ; then
	    echo "Argument: MME_FQDN_IDENTITIY"
	    return 1
	fi
	rand=$(od -A n -t d -N 2 /dev/urandom |tr -d ' ')
	mid=$((rand % 100))
	misdn=$((rand % 1000))
	
	#mid= $MME_ID + $num
	#misdn=$MME_ISDN + $num 
	
	
	if [ $# -ge 2 ] ; then 
	    mfqdn=$2
	else
	    mfqdn=`hostname --fqdn`.$REALM 
	fi
	
	
	echo ""
	echo "$SNAP/data_provisioning_mme  --id $mid --mme-isdn $misdn --mme-identity $mfqdn --realm $REALM --ue-reachability 1 --truncate True  --verbose True --truncate False --cassandra-cluster $Cassandra_Server_IP"
	
	python3 $SNAP/data_provisioning_mme --id $mid --mme-isdn $misdn --mme-identity $mfqdn --realm $REALM --ue-reachability 1 --truncate True  --verbose True --truncate False --cassandra-cluster $Cassandra_Server_IP

	;;
    
     "dump-mme" )
	 python3 $SNAP/dump_mme --cassandra-cluster $Cassandra_Server_IP
	 ;;

        
     "hss-certificate" )

	cd /tmp
	rm -rf ./demoCA
	mkdir ./demoCA
	echo 01 > ./demoCA/serial
	touch ./demoCA/index.txt
	touch ./demoCA/index.txt.attr
	fqdn=`hostname --fqdn`
	#RANDFILE=/tmp/.rnd
	#export "$RANDFILE"
	
	echo "Creating HSS certificate for user: $CONF_DIR $fqdn"
	# Create a Root Certification Authority Certificate
	openssl req  -new -batch -x509 -days 3650 -nodes -newkey rsa:1024 -out hss.cacert.pem -keyout hss.cakey.pem -subj /CN=$fqdn/C=FR/ST=PACA/L=Aix/O=Eurecom/OU=CM
	# Generate a Private Key
	openssl genrsa -out hss.key.pem 1024 
	# Generate a CSR (Certificate Signing Request) that will be self-signed
	openssl req -new -batch -out hss.csr.pem -key hss.key.pem -subj /CN=$fqdn/C=FR/ST=PACA/L=Aix/O=Eurecom/OU=CM
	#certificate authority 
	openssl ca -cert hss.cacert.pem -keyfile hss.cakey.pem -in hss.csr.pem -out hss.cert.pem -outdir . -batch
	mkdir -p $CONF_DIR/
	mv hss.cakey.pem hss.cert.pem hss.cacert.pem hss.key.pem $CONF_DIR
	cd -
	
#	echo "Done creating HSS certificate for user: $CONF_DIR $fqdn"
	
	;;
     
     "hss" | * )
	 
	 shift 
         echo "$HSS_EXEC  $HSS_EXEC_ARGS"
	 $HSS_EXEC  `echo $HSS_EXEC_ARGS`  "$@" $*
	 
	 ;;
     
esac


