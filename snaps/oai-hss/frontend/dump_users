#!/usr/bin/python3

#Copyright (c) 2017 Sprint
################################################################################
# Licensed to the OpenAirInterface (OAI) Software Alliance under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The OpenAirInterface Software Alliance licenses this file to You under
# the Apache License, Version 2.0  (the "License"); you may not use this file
# except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#-------------------------------------------------------------------------------
# For more information about the OpenAirInterface (OAI) Software Alliance:
#      contact@openairinterface.org
################################################################################
# file data_provisioning_users
# brief
# main author Sprint
# company Sprint
# email:
# other author Lionel GAUTHIER for python conversion

import argparse
import logging
#import json
#import tempfile
from cassandra.cluster import Cluster

dash = '-' * 140

def str2bool(arg):
    ua = str(arg).lower()
    if 'true'.startswith(ua):
        return True
    elif 'false'.startswith(ua):
        return False
    else:
        return False

    
def main():

    #logger = logging.getLogger()
    #logger.setLevel(logging.DEBUG)

    parser = argparse.ArgumentParser()
    parser.add_argument('-C', '--cassandra-cluster', default='172.17.0.2',      help="Cassandra list of nodes")
    parser.add_argument('-I', '--imsi-first',   default='000000000000000',     help="Check if the IMSI is in the DB")
    parser.add_argument('-v', '--verbose',      default='False',    choices=['True', 'TRUE', 'true', 'False', 'FALSE', 'false'],          help="Verbosity of dumped data")
    parser.add_argument('-n', '--no-of-users',  type=int, default=1,         help="Number of users")
    args = parser.parse_args()

    num_users=int(args.no_of_users)
        
    # This will attempt to connection to a Cassandra instance on your local machine (127.0.0.1)
    # The set of IP addresses we pass to the :class:`~.Cluster` is simply an initial set of contact points.
    # After the driver connects to one of these nodes it will automatically discover the rest of the nodes
    # in the cluster and connect to them, so you don't need to list every node in your cluster.
    cluster = Cluster([args.cassandra_cluster])

    session = cluster.connect()
    # session.set_keyspace('mykeyspace')

    # TODO pretty print
    if str2bool(args.verbose):
         
        rows = session.execute('SELECT imsi, msisdn, access_restriction, key, opc, mmehost, mmeidentity_idmmeidentity, mmerealm, rand, sqn, subscription_data FROM vhss.users_imsi')
        count = 0
        print ('imsi | msisdn | access_restriction | key | opc | mmehost | mmeid | mmerealm | rand | sqn | subscription_data |')
        for row in rows:
            #logging.info("%s %s %s %s %s %s %s %s %s %s" % (row[0], row[1], row[2], row[3], row[4], row[5], row[6], row[7], row[8], row[9]))
            print()
            print ('user_'+str(count)+': ', row[0], row[1], row[2], row[3], row[4], row[5], row[6], row[7], row[8], row[9], row[10])
            count +=1
    else:
        rows = session.execute('SELECT imsi, key, opc, mmehost, mmeidentity_idmmeidentity, mmerealm, sqn FROM vhss.users_imsi')
        count = 0
        print(dash)
        print ('{:<20s}{:<35s}{:<35s}{:<22s}{:<8s}{:<15s}{:<10s}'.format('imsi', 'key', 'opc', 'mmehost', 'mmeid', 'mmerealm', 'sqn'))
        print(dash)
        for row in rows:
            #logging.info("%s %s %s %s %s %s %s %s %s %s" % (row[0], row[1], row[2], row[3], row[4], row[5], row[6], row[7], row[8], row[9]))
            if args.imsi_first == '000000000000000' :
                print ('{:<20s}{:<35s}{:<35s}{:<25s}{:<5d}{:<15s}{:<10d}'.format(row[0], row[1], row[2], row[3], row[4], row[5], row[6]))
                #print ('user_'+str(count)+': ', row[0], row[1], row[2], row[3], row[4], row[5], row[6])
                count +=1
            elif args.imsi_first == row[0] :
                print ('{:<20s}{:<35s}{:<35s}{:<25s}{:<5d}{:<15s}{:<10d}'.format(row[0], row[1], row[2], row[3], row[4], row[5], row[6]))
                print()
                print ('[INFO] User added/exists in the DB')
if __name__ == "__main__":
    main()






