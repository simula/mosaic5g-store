#!/bin/bash

. $SNAP/common
. $SNAP/util

apiport=$(grep -m1 "api_port_default" $SNAP/apivars.py | cut -f3 -d " ")
mgrport=$(grep -m1 "api_manager_port_default" $SNAP/apivars.py | cut -f3 -d " ")
apiaddr=$(grep -m1 "api_host_default" $SNAP/apivars.py | cut -f3 -d " " | cut -f3 -d " " | tr -d "'")
mgraddr=$(grep -m1 "api_manager_host_default" $SNAP/apivars.py | cut -f3 -d " " | cut -f3 -d " " | tr -d "'")

if [ ! -z "$apiport" ] ; then 
    snapctl set conf.apiport=$apiport
    echo_info "Default API port :"  $(snapctl get conf.apiport)
else
    echo_error "Could not read api_port_default in apivars.py!"
fi

if [ ! -z "$mgrport" ] ; then 
    snapctl set conf.mgrport=$mgrport
    echo_info "Default MGR port :"  $(snapctl get conf.mgrport)
else
    echo_error "Could not read  api_manager_port_default in apivars.py!"
fi

if [ ! -z "$apiaddr" ] ; then 
    snapctl set conf.apiaddr=$apiaddr
    echo_info "Default API addr :"  $(snapctl get conf.apiaddr)
else
    echo_error "Could not read api_host_default in apivars.py!"
fi

if [ ! -z "$mgraddr" ] ; then 
    snapctl set conf.mgraddr=$mgraddr
    echo_info "Default MGR addr :"  $(snapctl get conf.mgraddr)
else
    echo_error "Could not read api_manager_host_default in apivars.py!"
fi

openapi="http://"$(snapctl get conf.apiaddr)":"$(snapctl get conf.apiport)
snapctl set conf.openapi=$openapi


case "$1" in

    "hss" )
	shift 
#	if [ ! -f $CONF_DIR/hss.conf ]; then
	cp $SNAP/etc/* $CONF_DIR
#	fi

	hss_set_vars
	# set the hss.conf
	#echo "set-hss $CONF_DIR/hss.conf"
	snapctl set conf.hss=$CONF_DIR/hss_rel14.json
	snapctl set conf.hssfd=$CONF_DIR/hss_rel14_fd.conf
	$SNAP/conf set-hss $(snapctl get conf.hss) # $CONF_DIR/enb.band7.tm1.50PRB.usrpb210.conf
	echo_info "Default HSS conf:" $SNAP/conf echo-hss 

	snapctl set conf.cassandra=$Cassandra_Server_IP
	snapctl set conf.realm="$REALM"
	snapctl set conf.host="$HOSTNAME"

	sed -i -e "s/ubuntu/$HOSTNAME/g" $HSS_FD_CONF_FILE
	sed -i -e "s/ubuntu/$HOSTNAME/g" $HSS_CONF_FILE 
	$SNAP/run hss-certificate
		
	# a copy for the user: with sudo, the user is root
	echo "backup the config file into $SNAP_USER_DATA"
	cp $CONF_DIR/hss_rel14.json $SNAP_USER_DATA
	cp $CONF_DIR/hss_rel14_fd.conf $SNAP_USER_DATA
	cp $CONF_DIR/acl.conf $SNAP_USER_DATA
	cp $CONF_DIR/oss.json $SNAP_USER_DATA

	# this part needs sudo privilage 
  	#service mysql restart || true 
	
	if [ -z "$(grep -o "$HOSTNAME.$REALM" /etc/hosts)" ]; then
	    cp /etc/hosts /etc/hosts.$REALM.bkup
	    #echo 127.0.0.1 localhost > /etc/hosts
	    #echo 127.0.0.1 `hostname`.$REALM `hostname` hss >> /etc/hosts
	    #echo 127.0.0.1 `hostname`.$REALM `hostname` mme >> /etc/hosts
	    echo "Adding 127.0.0.1" $HOSTNAME.$REALM $HOSTNAME "hss to /etc/hosts"
	    sed -i '/hss/d' /etc/hosts
	    sed -i "1i127.0.0.1 $HOSTNAME.$REALM $HOSTNAME hss" /etc/hosts
	    
	    echo "Adding 127.0.0.1" $HOSTNAME.$REALM $HOSTNAME "mme to /etc/hosts"
	    sed -i '/mme/d' /etc/hosts
	    sed -i "1i127.0.0.1 $HOSTNAME.$REALM $HOSTNAME mme" /etc/hosts
	fi
	
	check_cassandra_service
	if [ $? -eq 0 ]; then
	    $SNAP/run  provision-user-cassandra "$@" $*  || true 
	    $SNAP/run  provision-mme-cassandra "$@" $*  || true

	    echo ""
	    echo "HSS is initialized"
	    echo "Now, it is the time to configure the $CONF_DIR/hss_rel14_fd.conf"
	else
	    echo ""
	    echo "Cassandra service is not yet active"
	
	fi
	;;
    
    
    * )
	echo "Unknown command: $1"
	;;
    
esac
