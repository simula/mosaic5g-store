#!/usr/bin/python

#Copyright (c) 2017 Sprint
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

### Add an entry to the mme_identity table ######
import argparse
import logging
from cassandra.cluster import Cluster

def main():
    logger = logging.getLogger()
    logger.setLevel(logging.DEBUG)

    parser = argparse.ArgumentParser()
    parser.add_argument('-C', '--cassandra-cluster', default='172.17.0.2',      help="Cassandra list of nodes")
    args = parser.parse_args()
    
    # This will attempt to connection to a Cassandra instance on your local machine (127.0.0.1)
    # The set of IP addresses we pass to the :class:`~.Cluster` is simply an initial set of contact points.
    # After the driver connects to one of these nodes it will automatically discover the rest of the nodes 
    # in the cluster and connect to them, so you don't need to list every node in your cluster.
    cluster = Cluster([args.cassandra_cluster])
    
    session = cluster.connect()
    # session.set_keyspace('mykeyspace')

    # TODO pretty print
    print ('idmmeidentity | mmeisdn | mmehost | mmerealm | ue_reachability')
    rows = session.execute('SELECT idmmeidentity, mmeisdn, mmehost, mmerealm, ue_reachability FROM vhss.mmeidentity')
    for row in rows:
        #logging.info ("%s %s %s %s %s" %  (row[0], row[1], row[2], row[3], row[4]))
       print (row[0], row[1], row[2], row[3], row[4])

    #rows = session.execute('SELECT idmmeidentity, mmeisdn, mmehost, mmerealm, ue_reachability FROM vhss.mmeidentity_host')
    #for row in rows:
        #logging.info ("%s %s %s %s %s" % (row[0], row[1], row[2], row[3], row[4]))
    #    print (row[0], row[1], row[2], row[3], row[4])


if __name__ == "__main__":
    main()



