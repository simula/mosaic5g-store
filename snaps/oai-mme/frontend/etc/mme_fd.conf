# -------- Local ---------

# Uncomment if the framework cannot resolv it.
Identity = "ubuntu.openair5G.eur";
Realm = "openair5G.eur";

# TLS configuration (see previous section)
TLS_Cred = "/var/snap/oai-mme/current/mme.cert.pem",
           "/var/snap/oai-mme/current/mme.key.pem";
TLS_CA   = "/var/snap/oai-mme/current/mme.cacert.pem";

# Disable use of TCP protocol (only listen and connect in SCTP)
# Default : TCP enabled
No_SCTP;

# This option is ignored if freeDiameter is compiled with DISABLE_SCTP option.
# Prefer TCP instead of SCTP for establishing new connections.
# This setting may be overwritten per peer in peer configuration blocs.
# Default : SCTP is attempted first.
Prefer_TCP;


No_IPv6;

# Overwrite the number of SCTP streams. This value should be kept low, 
# especially if you are using TLS over SCTP, because it consumes a lot of 
# resources in that case. See tickets 19 and 27 for some additional details on 
# this.
# Limit the number of SCTP streams
SCTP_streams = 3;


# By default, freeDiameter acts as a Diameter Relay Agent by forwarding all 
# messages it cannot handle locally. This parameter disables this behavior.
NoRelay;

# Use RFC3588 method for TLS protection, where TLS is negociated after CER/CEA exchange is completed
# on the unsecure connection. The alternative is RFC6733 mechanism, where TLS protects also the
# CER/CEA exchange on a dedicated secure port.
# This parameter only affects outgoing connections.
# The setting can be also defined per-peer (see Peers configuration section).
# Default: use RFC6733 method with separate port for TLS.

#TLS_old_method;

AppServThreads = 4;

# Specify the addresses on which to bind the listening server. This must be 
# specified if the framework is unable to auto-detect these addresses, or if the
# auto-detected values are incorrect. Note that the list of addresses is sent 
# in CER or CEA message, so one should pay attention to this parameter if some 
# adresses should be kept hidden. 
ListenOn = "127.0.0.11";

Port = 3870;
SecPort = 5870;

# -------- Extensions ---------

# Uncomment (and create rtd.conf) to specify routing table for this peer.
#LoadExtension = "/usr/local/lib/freeDiameter/rt_default.fdx" : "rtd.conf";

# Uncomment (and create acl.conf) to allow incoming connections from other peers.
#LoadExtension = "/usr/local/lib/freeDiameter/acl_wl.fdx" : "acl.conf";

# Uncomment to display periodic state information
#LoadExtension = "/usr/local/lib/freeDiameter/dbg_monitor.fdx";

# Uncomment to enable an interactive Python interpreter session.
# (see doc/dbg_interactive.py.sample for more information)
#LoadExtension = "/usr/local/lib/freeDiameter/dbg_interactive.fdx";

# Load the RFC4005 dictionary objects
#LoadExtension = "/usr/local/lib/freeDiameter/dict_nasreq.fdx";

#LoadExtension = "dict_nas_mipv6.fdx";
#LoadExtension = "dict_S6as6d.fdx";

# Load RFC4072 dictionary objects
#LoadExtension = dict_eap.fdx";

# Load the Diameter EAP server extension (requires diameap.conf)
#LoadExtension = "app_diameap.fdx" : "diameap.conf";

# Load the Accounting Server extension (requires app_acct.conf)
#LoadExtension = "app_acct.fdx" : "app_acct.conf";

#LoadExtension = "_sample.fdx";
#LoadExtension = "app_acct.fdx";
#LoadExtension = "app_diameap.fdx";
#LoadExtension = "app_radgw.fdx";
#LoadExtension = "app_redirect.fdx";
#LoadExtension = "app_sip.fdx";
#LoadExtension = "dbg_interactive.fdx";
#LoadExtension = "dbg_monitor.fdx";
#LoadExtension = "dbg_msg_dumps.fdx";
#LoadExtension = "dbg_msg_timings.fdx";
#LoadExtension = "dbg_rt.fdx";
LoadExtension = "dict_3gpp2_avps.fdx";
#LoadExtension = "dict_CreditControl.fdx";
#LoadExtension = "dict_CxDx.fdx";
#LoadExtension = "dict_Gx.fdx";
#LoadExtension = "dict_NAS.fdx";
#LoadExtension = "dict_Ro.fdx";
#LoadExtension = "dict_Rx.fdx";
#LoadExtension = "dict_S6mS6n.fdx";
#LoadExtension = "dict_SGd.fdx";
#LoadExtension = "dict_SLh.fdx";
#LoadExtension = "dict_Sd.fdx";
#LoadExtension = "dict_Sh.fdx";
#LoadExtension = "dict_T4.fdx";
#LoadExtension = "dict_T6aT6bT7.fdx";
#LoadExtension = "dict_Tsp.fdx";
#LoadExtension = "dict_dcca.fdx";
#LoadExtension = "dict_dcca_3gpp.fdx";
#LoadExtension = "dict_dcca_starent.fdx";
LoadExtension = "dict_draftload_avps.fdx";
#LoadExtension = "dict_eap.fdx";
LoadExtension = "dict_etsi283034_avps.fdx";
#LoadExtension = "dict_legacy_xml.fdx";
#LoadExtension = "dict_mip6a.fdx";
#LoadExtension = "dict_mip6i.fdx";
#LoadExtension = "dict_nas_mipv6.fdx";
#LoadExtension = "dict_nasreq.fdx";
LoadExtension = "dict_rfc4004_avps.fdx";
LoadExtension = "dict_rfc4006bis_avps.fdx";
LoadExtension = "dict_rfc4072_avps.fdx";
LoadExtension = "dict_rfc4590_avps.fdx";
LoadExtension = "dict_rfc5447_avps.fdx";
LoadExtension = "dict_rfc5580_avps.fdx";
LoadExtension = "dict_rfc5777_avps.fdx";
LoadExtension = "dict_rfc5778_avps.fdx";
LoadExtension = "dict_rfc6734_avps.fdx";
LoadExtension = "dict_rfc6942_avps.fdx";
LoadExtension = "dict_rfc7155_avps.fdx";
LoadExtension = "dict_rfc7683_avps.fdx";
LoadExtension = "dict_rfc7944_avps.fdx";
#LoadExtension = "dict_sip.fdx";
LoadExtension = "dict_ts29061_avps.fdx";
LoadExtension = "dict_ts29128_avps.fdx";
LoadExtension = "dict_ts29154_avps.fdx";
LoadExtension = "dict_ts29173_avps.fdx";
LoadExtension = "dict_ts29212_avps.fdx";
LoadExtension = "dict_ts29214_avps.fdx";
LoadExtension = "dict_ts29215_avps.fdx";
LoadExtension = "dict_ts29217_avps.fdx";
LoadExtension = "dict_ts29229_avps.fdx";
LoadExtension = "dict_ts29272_avps.fdx";
LoadExtension = "dict_ts29273_avps.fdx";
LoadExtension = "dict_ts29329_avps.fdx";
LoadExtension = "dict_ts29336_avps.fdx";
LoadExtension = "dict_ts29337_avps.fdx";
LoadExtension = "dict_ts29338_avps.fdx";
LoadExtension = "dict_ts29343_avps.fdx";
LoadExtension = "dict_ts29344_avps.fdx";
LoadExtension = "dict_ts29345_avps.fdx";
LoadExtension = "dict_ts29368_avps.fdx";
LoadExtension = "dict_ts29468_avps.fdx";
LoadExtension = "dict_ts32299_avps.fdx";
#LoadExtension = "rt_busypeers.fdx";
#LoadExtension = "rt_default.fdx";
#LoadExtension = "rt_ereg.fdx";
#LoadExtension = "rt_ignore_dh.fdx";
#LoadExtension = "rt_load_balance.fdx";
#LoadExtension = "rt_randomize.fdx";
#LoadExtension = "rt_redirect.fdx";
#LoadExtension = "test_acct.fdx";
#LoadExtension = "test_app.fdx";
#LoadExtension = "test_hss.fdx";
#LoadExtension = "test_netemul.fdx";
#LoadExtension = "test_rt_any.fdx";
#LoadExtension = "test_sip.fdx";
#LoadExtension = "dict_Rf.fdx";
LoadExtension = "dict_S6as6d.fdx";
LoadExtension = "dict_S6t.fdx";
LoadExtension = "dict_S6c.fdx";

# -------- Peers ---------

# The framework will actively attempt to establish and maintain a connection
# with the peers listed here.
# For only accepting incoming connections, see the acl_wl.fx extension.

# ConnectPeer
# Declare a remote peer to which this peer must maintain a connection. 
# In addition, this allows specifying non-default parameters for this peer only
# (for example disable SCTP with this peer, or use RFC3588-flavour TLS). 
# Note that by default, if a peer is not listed as a ConnectPeer entry, an 
# incoming connection from this peer will be rejected. If you want to accept 
# incoming connections from other peers, see the acl_wl.fdx? extension which 
# allows exactly this. 

ConnectPeer= "ubuntu.openair5G.eur" { ConnectTo = "127.0.0.10"; No_SCTP ; No_IPv6; Prefer_TCP; No_TLS; port = 3868;  realm = "openair5G.eur";};
