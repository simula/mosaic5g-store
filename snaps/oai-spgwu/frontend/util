#! /bin/bash
################################################################################
# Licensed to the Mosaic5G under one or more contributor license
# work for additional information regarding copyright ownership.
# Apache License, Version 2.0  (the "License");
# You may obtain a copy of the License at
#  
#    	http://www.apache.org/licenses/LICENSE-2.0
#  
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
# -------------------------------------------------------------------------------
#   For more information about the Mosaic5G:
#   	contact@mosaic-5g.io
#
#
################################################################################
# file util
# brief util scripts and variables for oai-spgwu Snap
# author Navid Nikaein (navid.nikaein@eurecom.fr, navid.nikaein@mosaic-5g.io)

. $SNAP/common

# Echo 
black='[30m'
red='[31m'
green='[32m'
yellow='[33m'
blue='[1;34m'
magenta='[35m'
cyan='[36m'
white='[37m'
reset_color='[00m'
COLORIZE=1

cecho()  {  
    # Color-echo
    # arg1 = message
    # arg2 = color
    local default_msg="No Message."
    message=${1:-$default_msg}
    color=${2:-$green}
    [ "$COLORIZE" = "1" ] && message="$color$message$reset_color"
    echo -e "$message"
    return
}

echo_error()   { cecho "$*" $red          ;}
echo_fatal()   { cecho "$*" $red; exit -1 ;}
echo_warn()    { cecho "$*" $yellow       ;}
echo_success() { cecho "$*" $green        ;}
echo_info()    { cecho "$*" $blue         ;}


if_sudo(){

    if [ "$(id -u)" -eq 0 ] ; then
	return 0
    else
	echo "Please run as a sudoer!"
	exit 1
    fi
}

snap_isconnected(){

    echo_warn "Plug $1: snap connect $SNAP_NAME:$1"
    snapctl is-connected $1
    echo_success "$1 connected"
    
}

set_health(){
    
    status=$(snapctl services $SNAP_NAME.spgwud)
    case "$status" in
	*inactive*)
	    #echo "Service inactive"
	    snapctl set-health --code=ready blocked "$SNAP_NAME ready to be run"
	    ;;
	*active*)
	    #echo "Service active"
	    snapctl set-health okay
	    ;;
	*)
            #echo "Unknown service state"
	    snapctl set-health --code=error error "Execution failed. Checked the Journal"
	    ;;
    esac 
    
}

snap_info(){
    echo_info "Snap Name: $SNAP_NAME"
    echo_info "Snap Instance Name: $SNAP_INSTANCE_NAME"
    echo_info "Sanp Version: $SNAP_VERSION"
    echo_info "Sanp Revision: $SNAP_REVISION"
    echo_info "Snap Data: $SNAP_DATA"
    echo_info "Snap Conf : "
    snapctl get conf
    echo_warn 'Snap Permissions to be granted:
    	- log-observe
        - firewal-control
        - network-control
        - process-control'	          
    echo ""
    echo_warn "Check current permissions: snap connection $SNAP_NAME"
    
}

snap_help(){
    echo_info "Usage:   sudo  $SNAP_NAME.[options] args"
    echo "Note:    need root priviliage"
    echo "Options:"
    echo "  start:       start the $SNAP_NAME.spgwud daemon"
    echo "  stop:        stop the $SNAP_NAME.spgwud daemon"
    echo "  restart:     restart the $SNAP_NAME.spgwd daemon"
    echo "  status:      get the $SNAP_NAME.spgwud status"
    echo "  journal:     get the $SNAP_NAME.spgwud logs"
    echo ""
    echo "  init:       initialize SPGWU"
    echo "  conf-set:   set the SPGWU configuration file"
    echo "  conf-get:   get the current SPGWU configuration file (spgwu.conf)"
    echo "  conf-show:  show the path to the SPGWU configuration file (spgwu.conf)"
    echo "  conf-list:  list all the SPGWU configuration files (spgwu.conf)"
    echo ""
    echo "  help:       print this help"
    echo "  Example:    sudo oai-spgwu.init; sudo oai-spgwu;"

}
