#! /bin/bash
################################################################################
# Licensed to the Mosaic5G under one or more contributor license
# work for additional information regarding copyright ownership.
# Apache License, Version 2.0  (the "License");
# You may obtain a copy of the License at
#  
#    	http://www.apache.org/licenses/LICENSE-2.0
#  
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
# -------------------------------------------------------------------------------
#   For more information about the Mosaic5G:
#   	contact@mosaic-5g.io
#
#
################################################################################
# file run
# brief run scripts and variables for oai-cn Snap
# author Navid Nikaein (navid.nikaein@eurecom.fr, navid.nikaein@mosaic-5g.io)


. $SNAP/common
. $SNAP/util

export LD_LIBRARY_PATH="$SNAP/usr/lib/freeDiameter:$SNAP/usr/lib/x86_64-linux-gnu:$LD_LIBRARY_PATH"


if [ ! -e $MME_EXEC ]; then
    echo_error "Cannot find $MME_EXEC executable"
    exit -1 
fi		   	   

if [ ! -e $SPGW_EXEC ]; then
    echo_error "Cannot find $SPGW_EXEC executable"
    exit -1
fi

if [ ! -e $HSS_EXEC ]; then
    echo_error "Cannot find $HSS_EXEC executable"
    exit -1
fi

kern=`uname -r`
kern_version=`echo $kern | cut -d '.' -f1`
kern_major_revision=`echo $kern | cut -d '.' -f2`
if [ $kern_version -lt 4 ] && [ $kern_major_revision -le 10 ]; then
    echo_warn "Kernel $kern does not support GTP"
fi


if [ -r $SNAP_DATA/config_mme.sh ]; then
    . $SNAP_DATA/config_mme.sh
fi

if [ -r $SNAP_DATA/config_spgw.sh ]; then
    . $SNAP_DATA/config_spgw.sh
fi
if [ -r $SNAP_DATA/config_hss.sh ]; then
    . $SNAP_DATA/config_hss.sh
fi

MME_CONFIG=${MME_CONF_FILE2:-$MME_CONF_FILE}
MME_EXEC_ARGS=" -c $MME_CONFIG "

SPGW_CONFIG=${SPGW_CONF_FILE2:-$SPGW_CONF_FILE}
SPGW_EXEC_ARGS=" -c $SPGW_CONFIG "

HSS_CONFIG=${HSS_CONF_FILE2:-$HSS_CONF_FILE}
HSS_FD_CONF_FILE2=$(dirname $HSS_CONFIG)/hss_fd.conf
HSS_FD_CONFIG=${HSS_FD_CONF_FILE2:-$HSS_FD_CONF_FILE}
MYSQL_SERVER=`cat $HSS_CONFIG | grep  MYSQL_server  | cut -f2 -d'"'`
MYSQL_USER=`cat $HSS_CONFIG | grep  MYSQL_user  | cut -f2 -d'"'`
MYSQL_PW=`cat $HSS_CONFIG | grep  MYSQL_pass  | cut -f2 -d'"'`
REALM=`cat $HSS_FD_CONFIG | grep  "Realm "  | cut -f2 -d'"'`
USER_KEY=8BAF473F2F8FD09487CCCBD7097C6862
SQN=000000000021
OP=`cat $HSS_CONFIG | grep  -m1 OPERATOR_key  | cut -f2 -d'"'`
APN="oai.ipv4"
OPC="8E27B6AF0E692E750F32667A3B14605D"

HSS_EXEC_ARGS=" -c $HSS_CONFIG "


case "$1" in
    "gdb" )
	if [ -z "$2" ] ; then
	    echo "Name of the service to debug is missing. Possible values are : mme, hss, and spgw"
	    exit 0
	fi
	if [ "$2" != "mme" -a "$2" != "spgw" -a "$2" != "hss" ] ; then
	     echo "Unknown servie name $2. Possible values are : mme, hss, and spgw"
	     exit 0
	fi
	echo "Running $2 with the gdb"
	touch      $SNAP_DATA/.gdb_$2
	chmod 777  $SNAP_DATA/.gdb_$2
	app=${2^^}"_EXEC"   # refer to http://mywiki.wooledge.org/BashFAQ/006
	app_args=${2^^}"_EXEC_ARGS"
	echo "file ${!app}"              > $SNAP_DATA/.gdb_$2
	echo "set args  ${!app_args}"    >> $SNAP_DATA/.gdb_$2
	echo "run"                       >> $SNAP_DATA/.gdb_$2
	cat $SNAP_DATA/.gdb_$2
	exec $SNAP/gdb --data-directory=$SNAP_DATA  -n -x $SNAP_DATA/.gdb_$2
	;;
    "info" )
	shift 
	echo_info "Please manually run: snap info $SNAP_NAME "
	;; 
    
    "start-all")
	shift
	if_sudo
        #snap start $SNAP_NAME
	snapctl start --enable $SNAP_NAME.hssd "$@"
	sleep 1
	snapctl start --enable $SNAP_NAME.mmed "$@"
	sleep 1
	snapctl start --enable $SNAP_NAME.spgwd "$@"
	snapctl services $SNAP_NAME "$@"
        ;;
    
    "stop-all")
	shift
	if_sudo
        snapctl stop --disable $SNAP_NAME "$@"
	snapctl services $SNAP_NAME "$@"
	#snap stop $SNAP_NAME.hssd
        #snap stop $SNAP_NAME.mmed
        #snap stop $SNAP_NAME.spgwd
        ;;
    
    "restart-all")
	shift
	if_sudo
	snapctl start --enable  $SNAP_NAME "$@"
	snapctl services $SNAP_NAME "$@"
        ;;
    
    "status-all")
	shift 
	# systemctl status  --lines 0 snap.$SNAP_NAME.hssd.service  || true
	# systemctl status  --lines 0 snap.$SNAP_NAME.mmed.service  || true 
	# systemctl status  --lines 0 snap.$SNAP_NAME.spgwd.service || true
	snapctl services $SNAP_NAME  "$@"
	
	;;
      
    "start"  )
	daemon=$2
	shift 2
	if_sudo 
	snapctl start --enable $SNAP_NAME.$daemon  "$@"
	 snapctl services $SNAP_NAME "$@"
	;;
    "stop" )
	#	echo "snap stop $SNAP_NAME.$2"
	daemon=$2
	shift 2
	if_sudo
	snapctl stop --disable $SNAP_NAME.$daemon  "$@"
	snapctl services $SNAP_NAME "$@"
	;;
    
    "restart" )
	daemon=$2
	shift 2
	if_sudo
	snapctl stop $SNAP_NAME.$daemon  "$@"
	snapctl start --enable $SNAP_NAME.$daemon  "$@"
	snapctl services $SNAP_NAME "$@"
	;;
    "status" )
#	echo "systemctl status  snap.$SNAP_NAME.$2.service"
	#systemctl status  snap.$SNAP_NAME.$2.service
	daemon=$2
	shift 2
	snapctl services $SNAP_NAME.$daemon "$@" 
	;;

    "journal" )
	daemon=$2
	shift 2
	journalctl -u snap.$SNAP_NAME.$daemon.service "$@"
	;;
    "help" )
	echo "Usage:   sudo  $SNAP_NAME.[options] args"
	echo "Note:    need root priviliage"
	echo "Options:"
	echo "  hss-start:        start the $SNAP_NAME.hssd daemon"
	echo "  hss-stop:         stop the $SNAP_NAME.hssd daemon"
	echo "  hss-restart:      restart the $SNAP_NAME.hssd daemon"
	echo "  hss-status:       get the $SNAP_NAME.hssd status"
	echo "  hss-journal:      get the $SNAP_NAME.hssd logs"
	echo ""
	echo "  hss:              run HSS manually as a process"
	echo "  hss-init:         initialize HSS (after the 1st installation)"
	echo "  hss-conf-set:     set the HSS configuration file"
	echo "  hss-conf-get:     get the current HSS configuration file (hss.conf)"
	echo "  hss-conf-show:    show the path to the HSS configuration file (hss.conf)"
	echo "  hss-conf-list:    list all the HSS configuration files (hss.conf, hss_fd)"
	echo "  hss-add-user:     IMSI [APN] [USER_KEY] [SQN] [MMEIDENTITY] [OPC]  Add a user to HSS DB (operator key is taken from hss.conf, default user key, sqn, and mmeid will be taken if not provided)"
	echo "  hss-add-oaisim:   Add 128 oaisim users with the default values to be used for the simulation purpose"
	echo "  hss-remove-user:  IMSI Remove a user identified by its IMSI from HSS DB"
	echo "  hss-remove-oaisim:Remove 128 oaisim users"	
	echo "  hss-dump-users:   dump all the users in the DB (both user and pdn tables)"
	echo "  hss-get-user:     IMSI get the user info identified by IMSI in the DB (both user and pdn tables)"
	echo "  hss-add-mme:      [MME_FQDN]  Add a MME identified by its FQDN (default is the local FQDN)"
	echo "  hss-dump-mmeid:   dump the current authenticated mme hosts"
	echo "  hss-reset-db:     reset the oai_db to its initial values"
	echo ""
	echo "  mme-start:        start the $SNAP_NAME.mmed daemon"
	echo "  mme-stop:         stop the $SNAP_NAME.mmed daemon"
	echo "  mme-restart:      restart the $SNAP_NAME.mmed daemon"
	echo "  mme-status:       get the $SNAP_NAME.mmed status"
	echo "  mme-journal:      get the $SNAP_NAME.mmed logs"
	echo ""
	echo "  mme:              run MME"
	echo "  mme-init:         initialize MME"
	echo "  mme-conf-set:     set the MME configuration file"
	echo "  mme-conf-get:     get the current MME configuration file (mme.conf)"
	echo "  mme-conf-show:    show the path to the MME configuration file (mme.conf)"
	echo "  mme-conf-list:    list all the SPGW configuration files (mme.conf, mme_fd)"
	echo ""
	echo "  spgw-start:       start the $SNAP_NAME.spgwd daemon"
	echo "  spgw-stop:        stop the $SNAP_NAME.spgwd daemon"
	echo "  spgw-restart:     restart the $SNAP_NAME.spgwd daemon"
	echo "  spgw-status:      get the $SNAP_NAME.spgwd status"
	echo "  spgw-journal:     get the $SNAP_NAME.spgwd logs"
	echo ""
	echo "  spgw:            run SPGW"
	echo "  spgw-init:       initialize SPGW"
	echo "  spgw-init:       initialize SPGW"
	echo "  spgw-conf-set:   set the SPGW configuration file"
	echo "  spgw-conf-get:   get the current SPGW configuration file (spgw.conf)"
	echo "  spgw-conf-show:  show the path to the SPGW configuration file (spgw.conf)"
	echo "  spgw-conf-list:  list all the SPGW configuration files (spgw.conf)"
	echo ""
	echo "  status-al        status of all services"          
	echo "  stop-all         stop all services"          
	echo "  start-all        start of all services"          
#	echo "  debug            [x] debug service x, where x is mme, hss, or spgw"          
	echo ""
	echo "  help:            print this help"
	echo "  Example:         sudo oai-cn.hss-init; sudo oai-cn.hss;"
	echo "                   oai-cn.hss-add-user 208950000000010 oai.ipv4; oai-cn.hss-dump-users; "
	
	;;
    "mme" )
	shift 
	echo "$MME_EXEC  $MME_EXEC_ARGS"
	$MME_EXEC  `echo $MME_EXEC_ARGS` "$@"
	;;
    "spgw" )
	shift 
        echo "$SPGW_EXEC  $SPGW_EXEC_ARGS" 
	$SPGW_EXEC  `echo $SPGW_EXEC_ARGS` "$@"
        ;;

    "hss" )
	shift
        echo "$HSS_EXEC  $HSS_EXEC_ARGS"
	$HSS_EXEC  `echo $HSS_EXEC_ARGS`  "$@" $*
        ;;
    
    "import-db" | "hss-reset-db" )

	check_mysql_service
	if [ $? -gt 0 ] ; then
	    return 1
	fi
	    
	echo_info "using: MYSQL_SERVER=$MYSQL_SERVER, MYSQL_USER=$MYSQL_USER, MYSQL_PASS=$MYSQL_PW"    HSS_DB_Q1="DROP DATABASE IF EXISTS oai_db;"
	
	HSS_DB_Q2="CREATE DATABASE IF NOT EXISTS oai_db;"
	
	$HSS_DIR/mysql --force -h $MYSQL_SERVER -u $MYSQL_USER --password=$MYSQL_PW -e "${HSS_DB_Q1}"
	$HSS_DIR/mysql -h  $MYSQL_SERVER -u  $MYSQL_USER --password=$MYSQL_PW -e "${HSS_DB_Q2}"
	$HSS_DIR/mysql -h  $MYSQL_SERVER -u  $MYSQL_USER -p$MYSQL_PW oai_db < $HSS_DB 
	
	if [ $? -gt 0 ] ; then
	    echo_error "failed to import HSS DB"
	    rm -rf $SNAP_DATA/hss_db_import.sh
	else
	    echo_info "Successfully Imported the OAI HSS DB to mysql"
	    echo "$HSS_DB_IMPORT" > $SNAP_DATA/hss_db_import.sh
	fi
       
	;;

    "hss-remove-mme" )
	 check_mysql_service
	 if [ $? -gt 0 ] ; then
	     return 1
	 fi
 	 if [ "$2" == "-h" -o "$2" == "--help" -o "$2" == "-help"  -o  "$2" == "h" -o "$2" == "help"  ]; then
	     remove_mme_help
	     exit 0 
	 fi

	 if [ $# -ge 2 ] ; then 
	     mmeid=$2
	 else
	     echo_error "MMEID is missing"
	     remove_mme_help
	     exit 0
	 fi

	 echo_info "Removing the user with IMSI=$2 from the oai_db database"
	 #$HSS_DIR/mysql -u  $MYSQL_USER --password=$MYSQL_PW -h $MYSQL_SERVER oai_db -e "delete from users where imsi='$IMSI';")
	 $HSS_DIR/mysql -u  $MYSQL_USER --password=$MYSQL_PW -h $MYSQL_SERVER oai_db <<EOF
DELETE FROM mmeidentity WHERE idmmeidentity=$mmeid;
 
EOF
	 ;;


    "hss-add-mme" )
	check_mysql_service
	if [ $? -gt 0 ] ; then
	    return 1
	fi
	fqdn=`hostname --fqdn`
	if [ "$2" == "-h" -o "$2" == "--help" -o "$2" == "-help"  -o  "$2" == "h" -o "$2" == "help"  ]; then
	    add_mme_help $fqdn
	    exit 0 
	 fi 

	if [ $# -ge 2 ] ; then 
	    fqdn=$2
	fi
	
	if [ -z "$($HSS_DIR/mysql -u  $MYSQL_USER --password=$MYSQL_PW -h  $MYSQL_SERVER oai_db -e "select mmehost from mmeidentity where mmehost='$fqdn'";)" ]; then
	    
	    #count how many in order to compute the right primary key
	    
	    primary_key=`$HSS_DIR/mysql -u  $MYSQL_USER --password=$MYSQL_PW -h $MYSQL_SERVER oai_db -e "select max(idmmeidentity) from mmeidentity;" | egrep [0-9]+`
	    
	    primary_key=$((primary_key + 1))

	    echo "$primary_key"  > $SNAP_USER_DATA/.mmeidentity
	    
	    echo_info "Inserting MME FQDN=$fqdn, REALM=$REALM, and idmmeidentity=$primary_key in the mmeidentity table of oai_db database"
	    
	    #Inserting the mme in the database to let epc connect to hss
	    $HSS_DIR/mysql -u  $MYSQL_USER --password=$MYSQL_PW -h $MYSQL_SERVER oai_db << EOF 
INSERT INTO mmeidentity (\`idmmeidentity\`, \`mmehost\`, \`mmerealm\`, \`UE-Reachability\`) VALUES ('$primary_key', '$fqdn', '$REALM', 0);
EOF
	 else
	     echo_info "The requested FQDN $fqdn is already provisioned"
	fi
	 ;;

     "hss-dump-mmeid" | "hss-dump-mme" )
	 check_mysql_service
	 if [ $? -gt 0 ] ; then
	     return 1
	 fi
	
	 #echo "idmmeidentity | mmehost  | mmerealm | UE-Reachability "
	 $HSS_DIR/mysql -u  $MYSQL_USER --password=$MYSQL_PW -h $MYSQL_SERVER oai_db << EOF 
SELECT idmmeidentity,mmehost,mmerealm,\`UE-Reachability\` FROM  mmeidentity;
EOF
	 ;;
  
     "hss-dump-users" )
	 check_mysql_service
	 if [ $? -gt 0 ] ; then
	     return 1
	 fi


	 echo ""
	 echo_info "User table"
	 #echo_info "      imsi     | mmeidentity |      hex(users.key)    |     sqn      |      hex(rand)    |      hex(OPc)      |"
	 $HSS_DIR/mysql -u  $MYSQL_USER --password=$MYSQL_PW -h $MYSQL_SERVER oai_db << EOF 
SELECT imsi,mmeidentity_idmmeidentity,hex(users.key),sqn,hex(rand),hex(OPc) FROM users;

EOF
	 echo      ""
	 echo_info "PDN table"
	 echo_info "      imsi     | id  |  apn  |  pdn_type  |  qci | aggregate_ambr_ul | aggregate_ambr_dl  |"
	 $HSS_DIR/mysql -u  $MYSQL_USER --password=$MYSQL_PW -h $MYSQL_SERVER oai_db << EOF 

SELECT users_imsi,id,apn,pdn_type,qci,aggregate_ambr_ul,aggregate_ambr_dl FROM pdn;
EOF
	 ;;
     
      "hss-get-user" )
	 check_mysql_service
	 if [ $? -gt 0 ] ; then
	     return 1
	 fi
	 	
	 if [ "$2" == "-h" -o "$2" == "--help" -o "$2" == "-help"  -o  "$2" == "h" -o "$2" == "help"  ]; then
	     get_user_help
	     exit 0 
	fi
	
	 if [ $# -ge 2 ] ; then 
	     IMSI=$2
	 else
	     echo_error "IMSI is missing"
	     get_user_help
	     exit 0
  	 fi
	 echo ""
	 echo_info "User table"
	 #echo_info "      imsi       | mmeidentity |      hex(users.key)    |     sqn      |      hex(rand)    |      hex(OPc)      |"
	 $HSS_DIR/mysql -u  $MYSQL_USER --password=$MYSQL_PW -h $MYSQL_SERVER oai_db << EOF 
SELECT imsi,mmeidentity_idmmeidentity,hex(users.key),sqn,hex(rand),hex(OPc) FROM users WHERE imsi LIKE "$IMSI%";

EOF
	 echo ""
	 echo_info "PDN table"
	 # echo_info "      imsi       | id  |  apn  |  pdn_type  |  qci | aggregate_ambr_ul | aggregate_ambr_dl | "
	 $HSS_DIR/mysql -u  $MYSQL_USER --password=$MYSQL_PW -h $MYSQL_SERVER oai_db << EOF 

SELECT users_imsi,id,apn,pdn_type,qci,aggregate_ambr_ul,aggregate_ambr_dl FROM pdn WHERE users_imsi LIKE "$IMSI%";
EOF

	 
	 ;;
     # SELECT * FROM `pdn` WHERE `pdn`.`users_imsi`=310300000000001 LIMIT 10; 
     "hss-remove-user" )
	 check_mysql_service
	 if [ $? -gt 0 ] ; then
	     return 1
	 fi

	 if [ "$2" == "-h" -o "$2" == "--help" -o "$2" == "-help"  -o  "$2" == "h" -o "$2" == "help"  ]; then
	     remove_user_help
	     exit 0 
	fi

	 
	 if [ $# -ge 2 ] ; then 
	     IMSI=$2
	 else
	     echo_error "IMSI is missing"
	     remove_user_help
	     exit 0
  	 fi

	 echo_info "Removing the user with IMSI=$2 from the oai_db database"
	 #$HSS_DIR/mysql -u  $MYSQL_USER --password=$MYSQL_PW -h $MYSQL_SERVER oai_db -e "delete from users where imsi='$IMSI';")
	 $HSS_DIR/mysql -u  $MYSQL_USER --password=$MYSQL_PW -h $MYSQL_SERVER oai_db <<EOF
DELETE FROM users WHERE imsi like "$IMSI%";

DELETE FROM pdn WHERE users_imsi like "$IMSI%";
 
EOF
	 ;;

     "hss-add-user" )
	 check_mysql_service
	 if [ $? -gt 0 ] ; then
	     return 1
	 fi

	 if [ "$2" == "-h" -o "$2" == "--help" -o "$2" == "-help"  -o  "$2" == "h" -o "$2" == "help"  ]; then
	     add_user_help
	     exit 0 
	 fi
	 
	 if [ $# -ge 2 ] ; then 
	     IMSI=$2
	 else
	     echo_error "IMSI is missing"
	     add_user_help
	     exit 0
  	 fi

	 if [ $# -ge 3 ] ; then 
	     APN=$3
  	 fi
	 
	 if [ $# -ge 4 ] ; then
	     USER_KEY=$4
	 fi
	 if [ $# -ge 5 ] ; then 
	     SQN=$5
	 fi
	 if [ $# -ge 6 ] ; then
	     mmeidentity_idmmeidentity=$6
	 else
	   if [ -f $SNAP_USER_DATA/.mmeidentity ] ; then  
        mmeidentity_idmmeidentity=`cat $SNAP_USER_DATA/.mmeidentity`
	   else
        mmeidentity_idmmeidentity=`$HSS_DIR/mysql -u  $MYSQL_USER --password=$MYSQL_PW -h $MYSQL_SERVER oai_db -e "select max(idmmeidentity) from mmeidentity;" | egrep [0-9]+`
	   fi
	 fi
	 
	 if [ $# -ge 7 ] ; then
	     OPC=$7
	 fi
	 
	 msisdn=33638050036
	 imei=35609204079536
	 rau_tau_timer=120
	 ue_ambr_ul=50000000
	 ue_ambr_dl=100000000
	 access_restriction=47
	 mme_cap=0
	 urrp_mme=1
	 rand=33353336363633303332333633313634

	 PDN_ID=`$HSS_DIR/mysql -u  $MYSQL_USER --password=$MYSQL_PW -s -N  -h $MYSQL_SERVER oai_db -e "SELECT max(id) FROM pdn"`
	 
	 PDN_ID=$(($PDN_ID+1))
	 
	 echo_info "Inserting a user into the oai_db database: user and pdn tables"
	 echo_info "IMSI=$2, APN=$APN, USER-KEY=$USER_KEY, SQN=$SQN, OPC=$OPC, PDN_ID=$PDN_ID, MMEIdentity=$mmeidentity_idmmeidentity" 

	 #Inserting the mme in the database to let epc connect to hss
	 $HSS_DIR/mysql -u  $MYSQL_USER --password=$MYSQL_PW -h $MYSQL_SERVER oai_db << EOF 
INSERT INTO users
(imsi,msisdn,imei,imei_sv,ms_ps_status,rau_tau_timer,ue_ambr_ul,ue_ambr_dl,access_restriction,mme_cap,mmeidentity_idmmeidentity,users.key,\`RFSP-Index\`,urrp_mme,sqn,rand,OPc)
VALUES
($IMSI,$msisdn,$imei,NULL,"PURGED",$rau_tau_timer,$ue_ambr_ul,$ue_ambr_dl,$access_restriction,$mme_cap,$mmeidentity_idmmeidentity,unhex("$USER_KEY"),1,$urrp_mme,$SQN,unhex("$rand"),unhex("$OPC"));

insert into pdn (id, apn, pdn_type, pdn_ipv4, pdn_ipv6, aggregate_ambr_ul, aggregate_ambr_dl, pgw_id, users_imsi, qci, priority_level, pre_emp_cap, pre_emp_vul, \`LIPA-Permissions\`) 
VALUES 
($PDN_ID, "$APN", "IPv4", "0.0.0.0", "0:0:0:0:0:0:0:0",50000000, 100000000, 3, $IMSI, 9, 15, "DISABLED", "ENABLED", "LIPA-only");
EOF
	 ;;

     "add-oaisim")
	 add_oaisim_users
	 ;;
     "remove-oaisim")
	 remove_oaisim_users
	 ;;

     
    "hss-certificate"  )
	cd /tmp
	rm -rf ./demoCA
	mkdir ./demoCA
	echo 01 > ./demoCA/serial
	touch ./demoCA/index.txt
	fqdn=`hostname --fqdn`
	echo "Creating HSS certificate for user: $CONF_DIR $fqdn"
	# Create a Root Certification Authority Certificate
	openssl req  -new -batch -x509 -days 3650 -nodes -newkey rsa:1024 -out hss.cacert.pem -keyout hss.cakey.pem -subj /CN=$fqdn/C=FR/ST=PACA/L=Aix/O=Eurecom/OU=CM
	# Generate a Private Key
	openssl genrsa -out hss.key.pem 1024
	# Generate a CSR (Certificate Signing Request) that will be self-signed
	openssl req -new -batch -out hss.csr.pem -key hss.key.pem -subj /CN=$fqdn/C=FR/ST=PACA/L=Aix/O=Eurecom/OU=CM
	#certificate authority 
	openssl ca -cert hss.cacert.pem -keyfile hss.cakey.pem -in hss.csr.pem -out hss.cert.pem -outdir . -batch
	mkdir -p $CONF_DIR/
	mv hss.cakey.pem hss.cert.pem hss.cacert.pem hss.key.pem $CONF_DIR
	cd -
	;;

    "mme-certificate"  )
	cd /tmp
	rm -rf ./demoCA
	mkdir ./demoCA
	echo 01 > ./demoCA/serial
	touch ./demoCA/index.txt

	fqdn=`hostname --fqdn`
	echo "Creating MME certificate for user $CONF_DIR $fqdn"
	# Create a Root Certification Authority Certificate
	openssl req  -new -batch -x509 -days 3650 -nodes -newkey rsa:1024 -out mme.cacert.pem -keyout mme.cakey.pem -subj /CN=$fqdn/C=FR/ST=PACA/L=Aix/O=Eurecom/OU=CM
	# Generate a Private Key
	openssl genrsa -out mme.key.pem 1024
	# Generate a CSR (Certificate Signing Request) that will be self-signed
	openssl req -new -batch -out mme.csr.pem -key mme.key.pem -subj /CN=$fqdn/C=FR/ST=PACA/L=Aix/O=Eurecom/OU=CM
	#certificate authority
	openssl ca -cert mme.cacert.pem -keyfile mme.cakey.pem -in mme.csr.pem -out mme.cert.pem -outdir . -batch
	mkdir -p $CONF_DIR/
	mv mme.cakey.pem mme.cert.pem mme.cacert.pem mme.key.pem  $CONF_DIR
	cd - 
	;;
    
    * )
       echo_error "unknow run command"
       ;;

esac
