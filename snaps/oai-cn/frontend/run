#!/bin/sh

. $SNAP/common



if [ ! -e $MME_EXEC ]; then
    echo "Cannot find $MME_EXEC executable"
    exit -1 
fi		   	   

if [ ! -e $SPGW_EXEC ]; then
    echo "Cannot find $SPGW_EXEC executable"
    exit -1
fi

if [ ! -e $HSS_EXEC ]; then
    echo "Cannot find $HSS_EXEC executable"
    exit -1
fi

kern=`uname -r`
kern_version=`echo $kern | cut -d '.' -f1`
kern_major_revision=`echo $kern | cut -d '.' -f2`
if [ $kern_version -lt 4 ] && [ $kern_major_revision -le 10 ]; then
    echo "[Warn] Kernel $kern does not support GTP"
fi


if [ -r $SNAP_DATA/config_mme.sh ]; then
    . $SNAP_DATA/config_mme.sh
fi

if [ -r $SNAP_DATA/config_spgw.sh ]; then
    . $SNAP_DATA/config_spgw.sh
fi
if [ -r $SNAP_DATA/config_hss.sh ]; then
    . $SNAP_DATA/config_hss.sh
fi

MME_CONFIG=${MME_CONF_FILE2:-$MME_CONF_FILE}
MME_EXEC_ARGS=" -c $MME_CONFIG "

SPGW_CONFIG=${SPGW_CONF_FILE2:-$SPGW_CONF_FILE}
SPGW_EXEC_ARGS=" -c $SPGW_CONFIG "

HSS_CONFIG=${HSS_CONF_FILE2:-$HSS_CONF_FILE}
HSS_FD_CONF_FILE2=$(dirname $HSS_CONFIG)/hss_fd.conf
HSS_FD_CONFIG=${HSS_FD_CONF_FILE2:-$HSS_FD_CONF_FILE}
MYSQL_SERVER=`cat $HSS_CONFIG | grep  MYSQL_server  | cut -f2 -d'"'`
MYSQL_USER=`cat $HSS_CONFIG | grep  MYSQL_user  | cut -f2 -d'"'`
MYSQL_PW=`cat $HSS_CONFIG | grep  MYSQL_pass  | cut -f2 -d'"'`
REALM=`cat $HSS_FD_CONFIG | grep  "Realm "  | cut -f2 -d'"'`
USER_KEY=8BAF473F2F8FD09487CCCBD7097C6862
SQN=000000000021
OPC=`cat $HSS_CONFIG | grep  -m1 OPERATOR_key  | cut -f2 -d'"'`

HSS_EXEC_ARGS=" -c $HSS_CONFIG "



case "$1" in
    "gdb" )
	echo "Running $2 with the gdb"
	touch      $SNAP_DATA/.gdb_$2
	chmod 777  $SNAP_DATA/.gdb_$2
	echo "file ${2^^}_EXEC"        > $SNAP_DATA/.gdb_$2
	echo "set args ${2^^}_EXEC_ARGS" >> $SNAP_DATA/.gdb_$2
	echo "run"                     >> $SNAP_DATA/.gdb_$2
	cat $SNAP_DATA/.gdb_$2
	exec $SNAP/gdb --data-directory=$SNAP_DATA  -n -x $SNAP_DATA/.gdb_$2
	;;
    
    "start-all")

        snap start $SNAP_NAME.hssd
        sleep 1
	snap start $SNAP_NAME.mmed
        sleep 1
	snap start $SNAP_NAME.spgwd
        ;;
      "stop-all")

        snap stop $SNAP_NAME.hssd
        snap stop $SNAP_NAME.mmed
        snap stop $SNAP_NAME.spgwd
        ;;

     "status-all")

	systemctl status  snap.$SNAP_NAME.hssd.service  || true
	systemctl status  snap.$SNAP_NAME.mmed.service  || true 
	systemctl status  snap.$SNAP_NAME.spgwd.service || true 
       ;;
    "start"  )
	#[ -z "${2^^}_EXEC" ] || ( snap start $SNAP_NAME.$3 )
#	echo "snap start $SNAP_NAME.$2"
	snap start $SNAP_NAME.$2
	
	;;
    "stop" )
#	echo "snap stop $SNAP_NAME.$2"
	snap stop $SNAP_NAME.$2
	;;
    "restart" )
	snap restart $SNAP_NAME.$2
	;;
    "status" )
#	echo "systemctl status  snap.$SNAP_NAME.$2.service"
	systemctl status  snap.$SNAP_NAME.$2.service
	;;
    "journal" )
	journalctl -u snap.$SNAP_NAME.$2.service
	;;
    "help" )
	echo "Usage:   sudo  $SNAP_NAME.[options] args"
	echo "Note:    need root priviliage"
	echo "Options:"
	echo "  hss-start:        start the $SNAP_NAME.hssd daemon"
	echo "  hss-stop:         stop the $SNAP_NAME.hssd daemon"
	echo "  hss-restart:      restart the $SNAP_NAME.hssd daemon"
	echo "  hss-status:       get the $SNAP_NAME.hssd status"
	echo "  hss-journal:      get the $SNAP_NAME.hssd logs"
	echo ""
	echo "  hss:              run HSS manually as a process"
	echo "  hss-init:         initialize HSS (after the 1st installation)"
	echo "  hss-conf-set:     set the HSS configuration file"
	echo "  hss-conf-get:     get the current HSS configuration file (hss.conf)"
	echo "  hss-conf-show:    show the path to the HSS configuration file (hss.conf)"
	echo "  hss-conf-list:    list all the HSS configuration files (hss.conf, hss_fd)"
	echo "  hss-add-user:     IMSI [USER_KEY] [SQN] [MMEIDENTITY]  Add a user to HSS DB (operator key is taken from hss.conf, default user key, sqn, and mmeid will be taken if not provided)"
	echo "  hss-dump-users:   dump the current user base"
	echo "  hss-add-mme:      [MME_FQDN]  Add a MME identified by its FQDN (default is the local FQDN)"
	echo "  hss-dump-mmeid:   dump the current authenticated mme hosts"
	echo "  hss-reset-db:     reset the oai_db to its initial values"
	echo ""
	echo "  mme-start:        start the $SNAP_NAME.mmed daemon"
	echo "  mme-stop:         stop the $SNAP_NAME.mmed daemon"
	echo "  mme-restart:      restart the $SNAP_NAME.mmed daemon"
	echo "  mme-status:       get the $SNAP_NAME.mmed status"
	echo "  mme-journal:      get the $SNAP_NAME.mmed logs"
	echo ""
	echo "  mme:              run MME"
	echo "  mme-init:         initialize MME"
	echo "  mme-conf-set:     set the MME configuration file"
	echo "  mme-conf-get:     get the current MME configuration file (mme.conf)"
	echo "  mme-conf-show:    show the path to the MME configuration file (mme.conf)"
	echo "  mme-conf-list:    list all the SPGW configuration files (mme.conf, mme_fd)"
	echo ""
	echo "  spgw-start:       start the $SNAP_NAME.spgwd daemon"
	echo "  spgw-stop:        stop the $SNAP_NAME.spgwd daemon"
	echo "  spgw-restart:     restart the $SNAP_NAME.spgwd daemon"
	echo "  spgw-status:      get the $SNAP_NAME.spgwd status"
	echo "  spgw-journal:     get the $SNAP_NAME.spgwd logs"
	echo ""
	echo "  spgw:            run SPGW"
	echo "  spgw-init:       initialize SPGW"
	echo "  spgw-init:       initialize SPGW"
	echo "  spgw-conf-set:   set the SPGW configuration file"
	echo "  spgw-conf-get:   get the current SPGW configuration file (spgw.conf)"
	echo "  spgw-conf-show:  show the path to the SPGW configuration file (spgw.conf)"
	echo "  spgw-conf-list:  list all the SPGW configuration files (spgw.conf)"
	echo ""
	echo "  status           status of all services"          
	echo "  stop             stop all services"          
	echo "  start            start of all services"          
	echo ""
	echo "  help:            print this help"
	echo "  Example:         sudo oai-cn.hss-init; sudo oai-cn.hss;"
	echo "                   oai-cn.hss-add-user 208950000000010; oai-cn.hss-dump-users; "
	
	;;
    mme )
	if [ -n "$LD_LIBRARY_PATH" ]; then
	    LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$SNAP/lib:$SNAP/usr/lib:$SNAP/usr/local/lib:$SNAP/usr/local/lib/freeDiameter:$SNAP/usr/lib/x86_64-linux-gnu:$LD_LIBRARY_PATH
	else
	    LD_LIBRARY_PATH=$SNAP/lib:$SNAP/usr/lib:$SNAP/usr/local/lib:$SNAP/usr/local/lib/freeDiameter:$SNAP/usr/lib/x86_64-linux-gnu
	fi
	export LD_LIBRARY_PATH
	
	echo "$MME_EXEC  $MME_EXEC_ARGS"
	$MME_EXEC  `echo $MME_EXEC_ARGS` "$@"
	;;
    spgw )
	if [ -n "$LD_LIBRARY_PATH" ]; then
	    LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$SNAP/lib:$SNAP/usr/lib:$SNAP/usr/local/lib:$SNAP/usr/lib/x86_64-linux-gnu:$LD_LIBRARY_PATH
	else
	    LD_LIBRARY_PATH=$SNAP/lib:$SNAP/usr/lib:$SNAP/usr/local/lib:$SNAP/usr/local/lib/freeDiameter:$SNAP/usr/lib/x86_64-linux-gnu
	fi
	export LD_LIBRARY_PATH
	
        echo "$SPGW_EXEC  $SPGW_EXEC_ARGS" 
	$SPGW_EXEC  `echo $SPGW_EXEC_ARGS` "$@"
        ;;

    hss )
	if [ -n "$LD_LIBRARY_PATH" ]; then
	    LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$SNAP/lib:$SNAP/usr/lib:$SNAP/usr/local/lib:$SNAP/usr/local/lib/freeDiameter:$SNAP/usr/lib/x86_64-linux-gnu:$LD_LIBRARY_PATH
	else
	    LD_LIBRARY_PATH=$SNAP/lib:$SNAP/usr/lib:$SNAP/usr/local/lib:$SNAP/usr/local/lib/freeDiameter:$SNAP/usr/lib/x86_64-linux-gnu
	fi
	export LD_LIBRARY_PATH
	
        echo "$HSS_EXEC  $HSS_EXEC_ARGS"
	$HSS_EXEC  `echo $HSS_EXEC_ARGS`  "$@" $*
        ;;
    
    import-db | hss-reset-db )
	echo "using: MYSQL_SERVER=$MYSQL_SERVER, MYSQL_USER=$MYSQL_USER, MYSQL_PASS=$MYSQL_PW"
	
	HSS_DB_Q1="DROP DATABASE IF EXISTS oai_db;"
	HSS_DB_Q2="CREATE DATABASE IF NOT EXISTS oai_db;"
	
	$HSS_DIR/mysql --force -h $MYSQL_SERVER -u $MYSQL_USER --password=$MYSQL_PW -e "${HSS_DB_Q1}"
	$HSS_DIR/mysql -h  $MYSQL_SERVER -u  $MYSQL_USER --password=$MYSQL_PW -e "${HSS_DB_Q2}"
	$HSS_DIR/mysql -h  $MYSQL_SERVER -u  $MYSQL_USER -p$MYSQL_PW oai_db < $HSS_DB 

	if [ $? -gt 0 ] ; then
	    echo "failed to import HSS DB"
	    rm -rf $SNAP_DATA/hss_db_import.sh
	else
	    echo "Successfully Imported the OAI HSS DB to mysql"
	    echo "$HSS_DB_IMPORT" > $SNAP_DATA/hss_db_import.sh
	fi
	;;
     hss-add-mme )
	 if [ $# -ge 2 ] ; then 
	     fqdn=$2
	 else
	     fqdn=`hostname --fqdn`
	 fi
	 if [ -z "$($HSS_DIR/mysql -u  $MYSQL_USER --password=$MYSQL_PW -h  $MYSQL_SERVER oai_db -e "select mmehost from mmeidentity where mmehost='$fqdn'";)" ]; then

	    #count how many in order to compute the right primary key
	    
	    primary_key=`$HSS_DIR/mysql -u  $MYSQL_USER --password=$MYSQL_PW -h $MYSQL_SERVER oai_db -e "select max(idmmeidentity) from mmeidentity;" | egrep [0-9]+`

	    primary_key=$((primary_key + 1))

	    echo "$primary_key"  > $SNAP_USER_DATA/.mmeidentity
	    
	    echo "Inserting MME FQDN=$fqdn, REALM=$REALM, and idmmeidentity=$primary_key in the mmeidentity table of oai_db database"
	    
	    #Inserting the mme in the database to let epc connect to hss
	    $HSS_DIR/mysql -u  $MYSQL_USER --password=$MYSQL_PW -h $MYSQL_SERVER oai_db << EOF 
INSERT INTO mmeidentity (\`idmmeidentity\`, \`mmehost\`, \`mmerealm\`, \`UE-Reachability\`) VALUES ('$primary_key', '$fqdn', '$REALM', 0);
EOF
	 else
	     echo "The requested FQDN $fqdn is already provisioned"
	fi
	 ;;

     hss-dump-mmeid )
	 #echo "idmmeidentity | mmehost  | mmerealm | UE-Reachability "
	 $HSS_DIR/mysql -u  $MYSQL_USER --password=$MYSQL_PW -h $MYSQL_SERVER oai_db << EOF 
SELECT idmmeidentity,mmehost,mmerealm,\`UE-Reachability\` FROM  mmeidentity;
EOF
	 ;;

     hss-dump-users )
	 echo "imsi | mmeidentity_idmmeidentity | hex(users.key) | sqn | hex(rand) | hex(OPc)"
	 $HSS_DIR/mysql -u  $MYSQL_USER --password=$MYSQL_PW -h $MYSQL_SERVER oai_db << EOF 
SELECT imsi,mmeidentity_idmmeidentity,hex(users.key),sqn,hex(rand),hex(OPc) FROM users;
EOF

	 ;;
     hss-add-user )

	 if [ $# -ge 2 ] ; then 
	     IMSI=$2
	 else
	     echo "IMSI is missing"
	     exit 0
  	 fi
	 if [ $# -ge 3 ] ; then
	     USER_KEY=$3
	 fi
	 if [ $# -ge 4 ] ; then 
	     SQN=$4
	 fi
	 if [ $# -ge 5 ] ; then
	     mmeidentity_idmmeidentity=$5
	 else
	     mmeidentity_idmmeidentity=`cat $SNAP_USER_DATA/.mmeidentity`
	 fi
	 	     
	 msisdn=33638050036
	 imei=35609204079536
	 rau_tau_timer=120
	 ue_ambr_ul=50000000
	 ue_ambr_dl=100000000
	 access_restriction=47
	 mme_cap=0
	 urrp_mme=1
	 rand=33353336363633303332333633313634

	 echo "Inserting a user with IMSI=$2, USER-KEY=$USER_KEY, SQN=$SQN, OPC=$OPC, MMEIdentity=$mmeidentity_idmmeidentity into the oai_db database"

	 #Inserting the mme in the database to let epc connect to hss
	 $HSS_DIR/mysql -u  $MYSQL_USER --password=$MYSQL_PW -h $MYSQL_SERVER oai_db << EOF 
INSERT INTO users
(imsi,msisdn,imei,imei_sv,ms_ps_status,rau_tau_timer,ue_ambr_ul,ue_ambr_dl,access_restriction,mme_cap,mmeidentity_idmmeidentity,users.key,\`RFSP-Index\`,urrp_mme,sqn,rand,OPc)
VALUES
($IMSI,$msisdn,$imei,NULL,"PURGED",$rau_tau_timer,$ue_ambr_ul,$ue_ambr_dl,$access_restriction,$mme_cap,$mmeidentity_idmmeidentity,unhex("$USER_KEY"),1,$urrp_mme,$SQN,unhex("$rand"),unhex("$OPC"));
EOF
	 ;;
    hss-certificate  )
	cd /tmp
	rm -rf ./demoCA
	mkdir ./demoCA
	echo 01 > ./demoCA/serial
	touch ./demoCA/index.txt
	fqdn=`hostname --fqdn`
	echo "Creating HSS certificate for user: $CONF_DIR $fqdn"
	# Create a Root Certification Authority Certificate
	openssl req  -new -batch -x509 -days 3650 -nodes -newkey rsa:1024 -out hss.cacert.pem -keyout hss.cakey.pem -subj /CN=$fqdn/C=FR/ST=PACA/L=Aix/O=Eurecom/OU=CM
	# Generate a Private Key
	openssl genrsa -out hss.key.pem 1024
	# Generate a CSR (Certificate Signing Request) that will be self-signed
	openssl req -new -batch -out hss.csr.pem -key hss.key.pem -subj /CN=$fqdn/C=FR/ST=PACA/L=Aix/O=Eurecom/OU=CM
	#certificate authority 
	openssl ca -cert hss.cacert.pem -keyfile hss.cakey.pem -in hss.csr.pem -out hss.cert.pem -outdir . -batch
	mkdir -p $CONF_DIR/
	mv hss.cakey.pem hss.cert.pem hss.cacert.pem hss.key.pem $CONF_DIR
	cd -
	;;

    mme-certificate  )
	cd /tmp
	rm -rf ./demoCA
	mkdir ./demoCA
	echo 01 > ./demoCA/serial
	touch ./demoCA/index.txt

	fqdn=`hostname --fqdn`
	echo "Creating MME certificate for user $CONF_DIR $fqdn"
	# Create a Root Certification Authority Certificate
	openssl req  -new -batch -x509 -days 3650 -nodes -newkey rsa:1024 -out mme.cacert.pem -keyout mme.cakey.pem -subj /CN=$fqdn/C=FR/ST=PACA/L=Aix/O=Eurecom/OU=CM
	# Generate a Private Key
	openssl genrsa -out mme.key.pem 1024
	# Generate a CSR (Certificate Signing Request) that will be self-signed
	openssl req -new -batch -out mme.csr.pem -key mme.key.pem -subj /CN=$fqdn/C=FR/ST=PACA/L=Aix/O=Eurecom/OU=CM
	#certificate authority
	openssl ca -cert mme.cacert.pem -keyfile mme.cakey.pem -in mme.csr.pem -out mme.cert.pem -outdir . -batch
	mkdir -p $CONF_DIR/
	mv mme.cakey.pem mme.cert.pem mme.cacert.pem mme.key.pem  $CONF_DIR
	cd - 
	;;
    
    * )
       echo "unknow run command"
       ;;

esac
