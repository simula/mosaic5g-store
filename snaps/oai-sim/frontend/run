#! /bin/bash
################################################################################
# Licensed to the Mosaic5G under one or more contributor license
# work for additional information regarding copyright ownership.
# Apache License, Version 2.0  (the "License");
# You may obtain a copy of the License at
#  
#    	http://www.apache.org/licenses/LICENSE-2.0
#  
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
# -------------------------------------------------------------------------------
#   For more information about the Mosaic5G:
#   	contact@mosaic-5g.io
#
#
################################################################################
# file run
# brief run scripts and variables for oai-sim Snap
# author Navid Nikaein (navid.nikaein@eurecom.fr, navid.nikaein@mosaic-5g.io)


. $SNAP/common
. $SNAP/util

export LD_LIBRARY_PATH="$SNAP/usr/lib/x86_64-linux-gnu:$LD_LIBRARY_PATH"


if [ ! -e $UE_EXEC ]; then
    echo_error "Cannot find $UE_EXEC executable"
    exit 127
fi

if [ ! -e $ENB_EXEC ]; then
    echo_error "Cannot find $ENB_EXEC executable"
    exit 127
fi

if [ ! -e $USIM_MULTI_EXEC ]; then
    echo_error "Cannot find $USIM_MULTI_EXEC executable"
    exit 127
fi

if [ ! -e $USIM_EXEC ]; then
    echo_error "Cannot find $USIM_EXEC executable"
    exit 127
fi

if [ ! -e $NVRAM_EXEC ]; then
    echo_error "Cannot find $NVRAM_EXEC executable"
    exit 127
fi


if [ -r $SNAP_DATA/config_ue.sh ]; then
    . $SNAP_DATA/config_ue.sh
fi

if [ -r $SNAP_DATA/config_enb.sh ]; then
    . $SNAP_DATA/config_enb.sh
fi

if [ -r $SNAP_DATA/config_ue_cmd.sh ]; then
    . $SNAP_DATA/config_ue_cmd.sh
fi

if [ -r $SNAP_DATA/config_usim.sh ]; then
    . $SNAP_DATA/config_usim.sh
fi


UE_CONFIG=${UE_CONF_FILE2:-$UE_CONF_FILE}

UE_CMD=${UE_CMD_FILE2:-$UE_CMD_FILE}
UE_EXEC_ARGS="`cat $UE_CMD` -O $UE_CONFIG"


USIM=${USIM_CONF_FILE2:-$USIM_CONF_FILE}
USIM_EXEC_ARGS=" -c $USIM -o $CONF_DIR"

ENB_CONFIG=${ENB_CONF_FILE2:-$ENB_CONF_FILE}
ENB_EXEC_ARGS=" -O $ENB_CONFIG" 


case "$1" in
    "gdb" )
	echo "Running $SNAP_NAME with the gdb"
	touch      $SNAP_DATA/.gdb_$SNAP_NAME
	chmod 777  $SNAP_DATA/.gdb_$SNAP_NAME
	echo "file $UE_EXEC"        > $SNAP_DATA/.gdb_$SNAP_NAME
	echo "set args $UE_EXEC_ARGS" >> $SNAP_DATA/.gdb_$SNAP_NAME
	echo "run"                     >> $SNAP_DATA/.gdb_$SNAP_NAME
	cat $SNAP_DATA/.gdb_$SNAP_NAME
	exec $SNAP/gdb --data-directory=$SNAP_DATA  -n -x $SNAP_DATA/.gdb_$SNAP_NAME
	;;

    "info" )
	#snap info $SNAP_NAME
	 shift
	 snap_info

	;; 

    "start"  )
	daemon=$2
	shift 2
	if_sudo
	snapctl start --enable $SNAP_NAME.$daemon "$@"
	snapctl services $SNAP_NAME.$daemon
	;; 

    "start-all"  )
	daemon=$2
	shift
	if_sudo
	snapctl start --enable $SNAP_NAME.enbd "$@"
	sleep 3
	snapctl start --enable $SNAP_NAME.ued "$@"
	snapctl services $SNAP_NAME	
	;;

    "stop" )
	daemon=$2
	shift 2
	if_sudo
	snapctl stop --disable $SNAP_NAME.$daemon "$@"
	snapctl services $SNAP_NAME.$daemon
	;;

    "stop-all" )
	daemon=$2
	shift
	if_sudo
	snapctl stop --disable $SNAP_NAME "$@"
	snapctl services $SNAP_NAME
	;;

    "restart" )
	daemon=$2
	shift 2
	if_sudo
	snapctl stop --disable $SNAP_NAME.$daemon "$@"
	snapctl start --enable $SNAP_NAME.$daemon "$@"
	snapctl services $SNAP_NAME.$daemon
	;;

    "status" )
	daemon=$2
	shift 2
	# echo "Please manually run: snap services $SNAP_NAME.$daemon" 
	snapctl services $SNAP_NAME.$daemon 
	#systemctl status --lines 0 snap.$SNAP_NAME.$2.service
	;; 

    "status-all"  )
	daemon=$2
	shift
	snapctl services $SNAP_NAME
	;;

    "journal" )
	daemon=$2
	shift 2
	snap_isconnected log-observe
	journalctl -u snap.$SNAP_NAME.$daemon.service "$@"
	;;


    "help" )
	snap_help
	;;

    "usim-gen")
	shift 
	echo_info "$USIM_MULTI_EXEC $USIM_EXEC_ARGS $@"
	$USIM_MULTI_EXEC $USIM_EXEC_ARGS "$@"
	;;
    "usim-print")
	shift
	echo_info "$USIM_EXEC -p $@"
	export USIM_DIR="$CONF_DIR"
	$USIM_EXEC -p "$@"
	;;
    "nvram-print")
	shift 
	echo_info "$NVRAM_EXEC -p $@"
	export NVRAM_DIR="$CONF_DIR"
	$NVRAM_EXEC -p "$@"
	;;
    "ue" )
	shift
	export USIM_DIR="$CONF_DIR"
	export NVRAM_DIR="$CONF_DIR"
	
	#ln -s $CONF_DIR/.ue_emm.nvram0  .ue_emm.nvram0
	#ln -s $CONF_DIR/.ue.nvram0      .ue.nvram0
	#ln -s $CONF_DIR/.usim.nvram0    .usim.nvram0

	if_sudo
	#snap_isconnected sys-access
	snap_isconnected netlink-connector
	snap_isconnected process-control
	snap_isconnected network-control

	echo ""
	echo_info "$UE_EXEC  $UE_EXEC_ARGS $@"
	$UE_EXEC  $UE_EXEC_ARGS "$@"
	;;

    "enb" )
	shift

	if_sudo
	#snap_isconnected sys-access
	snap_isconnected netlink-connector
	snap_isconnected process-control
	snap_isconnected network-control

	set_enb_vars
	if [ -z "$($SNAP/bin/ip a s $ENBUE_IF | grep -o $ENBUE_ADDR)" ] ; then
	    $($SNAP/bin/ip a a $ENBUE_ADDR"/24" dev  $ENBUE_IF)
	fi

	echo ""
	echo_success "Connect to the telnet server to start UEs: telnet 127.0.1.1 9090"
	echo ""
       	echo_info "$ENB_EXEC  $ENB_EXEC_ARGS $@"
	$ENB_EXEC  $ENB_EXEC_ARGS "$@"
	;;

    * )
	echo_warn "unknow run command $@"
	;;
esac
