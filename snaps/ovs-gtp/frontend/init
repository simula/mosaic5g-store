#!/bin/sh

. $SNAP/common

os_ok=0
case "$os_dist" in
    "ubuntu18.04") os_ok=1 ;;
    "ubuntu17.10") os_ok=1 ;;
    "ubuntu17.04") os_ok=1 ;;
    "ubuntu16.04") os_ok=1 ;;
    "ubuntu-core16") os_ok=1 ;;
    #"ubuntu14.04") os_ok=1 ;;
    *)
	echo "[Warn] OS distribution $os_dist may not supported"
	#exit -1
	;;
esac 


kern_ok=0
kern=`uname -r`
kern_version=`echo $kern | cut -d '.' -f1`
kern_major_revision=`echo $kern | cut -d '.' -f2`
if [ $kern_version -lt 4 ] && [ $kern_major_revision -le 8 ] && [ $kern_major_revision -ge 11 ]; then
    echo "[Warn] Kernel $kern does not support GTP"
    read -p "Do you want to install the kernel version 4.9.x ? <y/N> " prompt
    #if [ $prompt =~ [yY](es)* ] ; then
    if [ $prompt =~ [yY] ] ; then
	echo "installing the kernel 4.9.x"

	wget http://kernel.ubuntu.com/~kernel-ppa/mainline/v4.9/linux-headers-4.9.0-040900_4.9.0-040900.201612111631_all.deb
	
	wget http://kernel.ubuntu.com/~kernel-ppa/mainline/v4.9/linux-headers-4.9.0-040900-generic_4.9.0-040900.201612111631_amd64.deb
	
	wget http://kernel.ubuntu.com/~kernel-ppa/mainline/v4.9/linux-image-4.9.0-040900-generic_4.9.0-040900.201612111631_amd64.deb
	
	sudo dpkg -i *.deb
	read -p "Do you want to restart  ? <y/N> " prompt
	echo "Ensure that you boot on kernel version 4.9.x"
	if [ $prompt =~ [yY] ]]; then
	    sudo reboot
	fi
	
    else
	echo "Please install the required kernel 4.9.x to proceed"
    fi
       
else
    #echo "[INFO] the required kernel dependency is met"
    kern_ok=1
fi

if [ $kern_ok -ge 1 ];  then 
    modprobe udp_tunnel
    modprobe ip6_udp_tunnel
    modprobe gtp
    modprobe libcrc32c
    modprobe nf_conntrack
    modprobe nf_nat
    modprobe nf_defrag_ipv6
    modprobe nf_nat_ipv4
    modprobe nf_nat_ipv6
    modprobe ip_tunnel
    modprobe gre
    modprobe vxlan
    #modprobe geneve
    
    # from local libs:  openvswitch.ko   vport-gre.ko     vport-lisp.ko    vport-vxlan.ko vport-geneve.ko  vport-gtp.ko     vport-stt.ko  
    cd $SNAP/lib/modules/
    #modprobe -d lib/modules  openvswitch.ko
    #modprobe -d lib/modules vport-gtp
    #modprobe -d lib/modules vport-gre
    #modprobe -d lib/modules vport-lisp
    #modprobe -d lib/modules vport-vxlan
    #modprobe -d lib/modules vport-geneve
    #modprobe -d lib/modules vport-stt
    echo "modprobe"
#    modprobe -q openvswitch
#    if [ $? -eq 0 ] ; then 
#	echo "output: $?"
#	echo "rmmod"
#	rmmod openvswitch.ko
#	rmmod vport-gtp.ko
#	rmmod vport-gre.ko
#	rmmod vport-lisp.ko
#	rmmod vport-vxlan.ko
#	rmmod vport-geneve.ko
	#rmmod vport-stt.ko
 #   else
#	echo "insmod"
	#insmod ./openvswitch.ko
	insmod ./vport-gtp.ko
	insmod ./vport-gre.ko
	#insmod ./vport-lisp.ko
	insmod ./vport-vxlan.ko
	#insmod ./vport-geneve.ko
	#insmod ./vport-stt.ko
#    fi 
    cd -
    #make modules_install  # this overwrites openvswitch.ko, vport.ko, vport-gtp.ko, etc.
    mkdir -p $OVS_ETC
    mkdir -p $OVS_RUN
    ovsdb-tool create $OVS_ETC/conf.db $OVS_CONF/vswitchd/vswitch.ovsschema
    # start the OVS server 
    ovsdb-server --remote=punix:$OVS_RUN/db.sock \
		 --remote=db:Open_vSwitch,Open_vSwitch,manager_options \
		 --private-key=db:Open_vSwitch,SSL,private_key \
		 --certificate=db:Open_vSwitch,SSL,certificate \
		 --bootstrap-ca-cert=db:Open_vSwitch,SSL,ca_cert \
		 --pidfile --detach
    ovs-vsctl --no-wait init
    ovs-vswitchd --pidfile --detach --log-file=$SNAP_USER_DATA/log
    echo "[INFO] OVS log file: $SNAP_USER_DATA/log "

else
    exit 127
fi

echo "OVS init: done "
